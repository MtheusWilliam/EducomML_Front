{"remainingRequest":"/home/vitor/Documentos/EducomML/EducomML_Front/master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vitor/Documentos/EducomML/EducomML_Front/master/src/components/Panels.vue?vue&type=template&id=3a6ccd9f&","dependencies":[{"path":"/home/vitor/Documentos/EducomML/EducomML_Front/master/src/components/Panels.vue","mtime":1594515351651},{"path":"/home/vitor/Documentos/EducomML/EducomML_Front/master/node_modules/cache-loader/dist/cjs.js","mtime":1593613513250},{"path":"/home/vitor/Documentos/EducomML/EducomML_Front/master/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1593613518353},{"path":"/home/vitor/Documentos/EducomML/EducomML_Front/master/node_modules/vuetify-loader/lib/loader.js","mtime":1593613518416},{"path":"/home/vitor/Documentos/EducomML/EducomML_Front/master/node_modules/cache-loader/dist/cjs.js","mtime":1593613513250},{"path":"/home/vitor/Documentos/EducomML/EducomML_Front/master/node_modules/vue-loader/lib/index.js","mtime":1593613518353}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}