{"remainingRequest":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\www\\EducomML\\EducomML_Front\\src\\components\\Panels.vue?vue&type=template&id=3a6ccd9f&","dependencies":[{"path":"C:\\www\\EducomML\\EducomML_Front\\src\\components\\Panels.vue","mtime":1595042199906},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593634551412},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1593634595227},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1593634595918},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593634551412},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\index.js","mtime":1593634595223}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:
<v-row>
  <!--Panel do Domínio-->
  <v-expansion-panels v-model="vModelPanelDomain" multiple>
    <v-expansion-panel v-for="(item,i) in 1" :key="i">
      <v-expansion-panel-header color="#666666" style="color:white; height: 55px;">
        <!--HEADER DO DOMÍNIO-->
        <v-row>
          <v-col class="d-flex align-center" style="height:100%;">
            <v-avatar color="white" size="40" class="mr-2">
              <span class="black--text" style="font-size:1.2em;">DM</span>
            </v-avatar>
            <div style="vertical-align:middle;" class="mt-3">
              <p>
                <strong
                  v-if="dominio_data.nameknowledgedomain.length <= 40"
                  style="font-size:1.2em;"
                >{{dominio_data.nameknowledgedomain}}</strong>
                <strong
                  v-else
                  style="font-size:1.2em;"
                >{{dominio_data.nameknowledgedomain.slice(0,40)}}...</strong>
                <br />
                <span
                  style="font-size:0.9em;"
                  v-if="dominio_data.subtitle && dominio_data.subtitle.length <=40"
                >{{dominio_data.subtitle}}</span>
                <span
                  style="font-size:0.9em;"
                  v-if="dominio_data.subtitle && dominio_data.subtitle.length > 40"
                >{{dominio_data.subtitle.slice(0,40)}}...</span>
              </p>
            </div>
          </v-col>
          <v-col cols="4" class="d-flex align-center justify-end">
            <div class="d-flex justify-end mr-1 align-center">
              <!--Menu para criação de elementos instrucionais do Domínio-->

              <v-menu
                top="top"
                width="300px"
                origin="center center"
                :offset-y="true"
                transition="scale-transition"
              >
                <template v-slot:activator="{ on }">
                  <v-btn icon="icon" color="white" dark="dark" v-on="on">
                    <v-icon>mdi-text-box-plus-outline</v-icon>
                  </v-btn>
                </template>

                <InstrucMenuFiles
                  @instrucdialogoption="instrucOpenFileDialog"
                  :instrucOptionCall="dominio"
                  :instrucType="'dominio'"
                />
              </v-menu>

              <!-- Menu para criação de arquivos-->
              <v-menu
                top="top"
                width="300px"
                origin="center center"
                :offset-y="true"
                transition="scale-transition"
              >
                <template v-slot:activator="{ on }">
                  <v-btn icon="icon" color="white" dark="dark" v-on="on">
                    <v-icon>mdi-dots-horizontal</v-icon>
                  </v-btn>
                </template>

                <MenuFiles
                  @dialogoption="openFileDialog"
                  :optionCall="dominio"
                  :type="'dominio'"
                />
              </v-menu>
              <!--Formulario para adição do módulo-->
              <v-dialog v-model="dialog_modulo" persistent="persistent" max-width="600px">
                <template v-slot:activator="{ on }">
                  <v-btn icon="icon" color="white" v-on="on">
                    <v-icon>mdi-plus</v-icon>
                  </v-btn>
                </template>

                <ModuloDialog
                  :module="modulo"
                  @close_or_save="close_or_save_modulo"
                  :domain="dominio"
                  :dialog="dialog_modulo"
                />
              </v-dialog>

              <!--Formulario para edição do domínio-->
              <v-dialog v-model="dialog_dominio" persistent="persistent" max-width="600px">
                <template v-slot:activator="{ on }">
                  <v-btn icon="icon" color="white" v-on="on">
                    <v-icon>mdi-pencil</v-icon>
                  </v-btn>
                </template>
                <!--Formulario para criação de módulo-->
                <DominioDialog
                  @close_or_save="close_or_save_dominio"
                  @dominio_data="setDomainVariables"
                  :domain="dominio_data"
                  :dialog="dialog_dominio"
                />
              </v-dialog>

              <!--Formulario para criação de submódulo-->
              <v-dialog v-model="dialog_submodulo" persistent="persistent" max-width="600px">
                <SubModuloDialog
                  :submodule="submodulo"
                  :module="modulo"
                  @close_or_save="close_or_save_submodulo "
                  :domain="dominio"
                  :dialog="dialog_submodulo"
                />
              </v-dialog>
              <!--Formulario para criação de conceito-->
              <v-dialog
                v-model="dialog_conceito"
                style="overflow-y: hidden;"
                persistent="persistent"
                max-width="755px"
              >
                <ConceitoDialog
                  :concept="conceito"
                  :module="modulo"
                  @close_or_save="close_or_save_conceito"
                  :domain="dominio"
                  :dialog="dialog_conceito"
                />
              </v-dialog>
              <!--FORMULARIOS PARA CRIAÇÃO DE ARQUIVOS-->
              <!--Formulario para criação de imagem-->
              <v-dialog v-model="dialog_imagem" persistent="persistent" max-width="800px">
                <ImageDialog
                  @close="dialogclose"
                  :optionCall="objectFile"
                  :type="type"
                  :domain="dominio"
                  :dialog="dialog_imagem"
                  :mobilemedia="mobilemedia"
                />
              </v-dialog>
              <!--Formulario para criação de video-->
              <v-dialog v-model="dialog_video" persistent="persistent" max-width="800px">
                <VideoDialog
                  @close="dialogclose"
                  :optionCall="objectFile"
                  :type="type"
                  :domain="dominio"
                  :dialog="dialog_video"
                  :mobilemedia="mobilemedia"
                />
              </v-dialog>
              <!--Formulario para criação de audio-->
              <v-dialog v-model="dialog_audio" persistent="persistent" max-width="800px">
                <AudioDialog
                  @close="dialogclose"
                  :optionCall="objectFile"
                  :type="type"
                  :domain="dominio"
                  :dialog="dialog_audio"
                  :mobilemedia="mobilemedia"
                />
              </v-dialog>
              <!--Formulario para criação de texto-->
              <v-dialog v-model="dialog_texto" persistent="persistent" max-width="800px">
                <TextDialog
                  @close="dialogclose"
                  :optionCall="objectFile"
                  :type="type"
                  :domain="dominio"
                  :dialog="dialog_texto"
                  :mobilemedia="mobilemedia"
                />
              </v-dialog>
              <!--Formulario para criação de link-->
              <v-dialog v-model="dialog_link" persistent="persistent" max-width="800px">
                <LinkDialog
                  @close="dialogclose"
                  :optionCall="objectFile"
                  :type="type"
                  :domain="dominio"
                  :dialog="dialog_link"
                  :mobilemedia="mobilemedia"
                />
              </v-dialog>

              <!--FORMULARIOS PARA CRIAÇÃO DE ITENS DE INFORMAÇÃO -->
              <!--Formulario para criação de procedimento -->
              <v-dialog v-model="dialog_procedure" persistent="persistent" max-width="800px">
                <ProcedureDialog
                  @close="dialogclose"
                  :dialog="dialog_procedure"
                  :procedure="procedimento"
                  :concept="conceito"
                  :module="modulo"
                />
              </v-dialog>

              <!--FORMULARIOS PARA CRIAÇÃO DE ELEMENTOS INSTRUCIONAIS -->
              <!--Formulario para criação de exercício e avaliação -->
              <v-dialog v-model="dialog_avaliacao" persistent="persistent" max-width="1000px">
                <AvaliacaoDialog
                  @instrucclose="instrucdialogclose"
                  :instrucOptionCall="instrucObjectFile"
                  :instrucType="instrucType"
                  :instrucValueType="instrucValueType"
                  :domain="dominio"
                  :dialog="dialog_avaliacao"
                  :instructionalelement="elementoinstrucional"
                />
              </v-dialog>
              <!--Formulario para criação de atividade colaborativa -->
              <v-dialog
                v-model="dialog_atividadecolaborativa"
                persistent="persistent"
                max-width="1000px"
              >
                <AtividadeColaborativaDialog
                  @instrucclose="instrucdialogclose"
                  :instrucOptionCall="instrucObjectFile"
                  :instrucType="instrucType"
                  :domain="dominio"
                  :dialog="dialog_atividadecolaborativa"
                  :instructionalelement="elementoinstrucional"
                />
              </v-dialog>
              <!--Formulario para criação de atividade colaborativa -->
              <v-dialog v-model="dialog_visible" persistent="persistent" max-width="1100px">
                <VisibleDialog
                  :domain="dominio"
                  :dialog="dialog_visible"
                  @close_or_save="visibleClose"
                />
              </v-dialog>
            </div>
          </v-col>
        </v-row>
      </v-expansion-panel-header>
      <!--FIM DO HEADER DO DOMÍNIO-->
      <v-expansion-panel-content>
        <!--CONTENT DO DOMÍNIO-->
        <!-- PANELS DOS ARQUIVOS/MOBILEMEDIAS DO DOMÍNIO-->
        <v-expansion-panels
          v-for="(mobilemedia) in dominio.mobilemedias"
          :key="mobilemedia.url"
          class="mt-2 mb-2"
        >
          <v-expansion-panel>
            <v-expansion-panel-header color="#A5A5A5" style="color:white; height: 55px;">
              <v-row>
                <v-col class="d-flex align-center" style="height:100%;">
                  <div style="vertical-align:middle;" class="mt-3">
                    <p>
                      <v-icon
                        color="white"
                        large
                      >{{fileTypesIcon[(mobilemedia.fk_idmediatype).split("/")[4]-1]}}</v-icon>
                      {{mobilemediaTypeLabel[parseInt((mobilemedia.fk_idmediatype).split("/")[4]-1)]}}
                    </p>
                  </div>
                </v-col>
                <v-col cols="4" class="d-flex align-center justify-end">
                  <div class="d-flex justify-end mr-1 align-center">
                    <!--Formulario para edição do arquivo/mobilemedia-->
                    <v-btn
                      icon="icon"
                      color="white"
                      @click="setmobilemedia(mobilemedia, dominio, 'dominio')"
                    >
                      <v-icon>mdi-pencil</v-icon>
                    </v-btn>
                    <!--Função para excluir arquivo/mobilemedia-->
                    <v-btn
                      icon="icon"
                      color="white"
                      @click="auxElementDelete = mobilemedia; alertDelete=true"
                    >
                      <v-icon>mdi-delete</v-icon>
                    </v-btn>
                  </div>
                </v-col>
              </v-row>
            </v-expansion-panel-header>

            <v-expansion-panel-content>
              <br />
              <span v-if="mobilemedia.urllink">{{mobilemedia.urllink}}</span>
              <span v-if="mobilemedia.textfull" style="white-space: pre-line">
                <strong>Texto completo:</strong>
                <br />
                {{mobilemedia.textfull}}
                <br />
              </span>

              <span v-if="mobilemedia.textshort" style="white-space: pre-line">
                <strong>Texto resumido:</strong>
                <br />
                {{mobilemedia.textshort}}
              </span>
            </v-expansion-panel-content>
          </v-expansion-panel>
        </v-expansion-panels>
        <!-- FIM DOS PANELS DOS ARQUIVOS DO DOMÍNIO-->
        <!--LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DO DOMÍNIO-->
        <v-expansion-panels
          v-for="(instrucelement) in instrucElementsSearch(dominio)"
          :key="instrucelement.url"
          class="mt-2 mb-2"
        >
          <v-expansion-panel>
            <v-expansion-panel-header color="#A5A5A5" style="color:white; height: 55px;">
              <v-row>
                <v-col class="d-flex align-center" style="height:100%;">
                  <div style="vertical-align:middle;" class="mt-3">
                    <p>
                      <v-icon
                        color="white"
                        large
                      >{{instrucTypesIcon[(instrucelement.fk_instructionalelementtype).split("/")[4]-1]}}</v-icon>
                      <span v-if="instrucelement.label.length <= 40">{{instrucelement.label}}</span>
                      <span v-else>{{instrucelement.label.slice(0,40)}}...</span>
                    </p>
                  </div>
                </v-col>
                <v-col cols="4" class="d-flex align-center justify-end">
                  <div class="d-flex justify-end mr-1 align-center">
                    <!--Formulario para edição dos ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                    <v-btn
                      icon="icon"
                      color="white"
                      @click="setinstructionalelement(instrucelement, dominio, 'dominio')"
                    >
                      <v-icon>mdi-pencil</v-icon>
                    </v-btn>
                    <!--Função para excluir ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                    <v-btn
                      icon="icon"
                      color="white"
                      @click="auxElementDelete = instrucelement; alertDelete=true"
                    >
                      <v-icon>mdi-delete</v-icon>
                    </v-btn>
                  </div>
                </v-col>
              </v-row>
            </v-expansion-panel-header>

            <v-expansion-panel-content></v-expansion-panel-content>
          </v-expansion-panel>
        </v-expansion-panels>
        <!-- FIM DA LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DO DOMÍNIO-->
        <!--Panels dos Módulos-->
        <v-expansion-panels v-model="vModelPanelModules" multiple>
          <v-expansion-panel
            v-for="(modulo, imodulo) in getNotSubmodules(dominio)"
            :key="imodulo"
            class="mt-2 mb-2"
          >
            <v-expansion-panel-header color="#7FD15E" style="color:white; height: 55px;">
              <!--HEADER DO MÓDULO-->
              <v-row>
                <v-col class="d-flex align-center" style="height:100%;">
                  <v-avatar color="white" size="40" class="mr-2">
                    <span class="black--text" style="font-size:1.2em;">MD</span>
                  </v-avatar>
                  <div style="vertical-align:middle;" class="mt-3">
                    <p>
                      <strong
                        v-if="modulo.namemodule.length <= 40"
                        style="font-size:1.2em;"
                      >{{ modulo.namemodule }}</strong>
                      <strong v-else style="font-size:1.2em;">{{modulo.namemodule.slice(0,40)}}...</strong>
                      <br />
                      <span
                        style="font-size:0.9em;"
                        v-if="modulo.subtitle && modulo.subtitle.length <= 40"
                      >{{modulo.subtitle}}</span>
                      <span
                        style="font-size:0.9em;"
                        v-if="modulo.subtitle && modulo.subtitle.length > 40"
                      >{{modulo.subtitle.slice(0,40)}}...</span>
                    </p>
                  </div>
                </v-col>
                <v-col cols="4" class="d-flex align-center justify-end">
                  <div class="d-flex justify-end mr-1 align-center">
                    <!--Menu para criação de elementos instrucionais do Módulo-->
                    <v-menu
                      top="top"
                      width="300px"
                      origin="center center"
                      :offset-y="true"
                      transition="scale-transition"
                    >
                      <template v-slot:activator="{ on }">
                        <v-btn icon="icon" color="white" dark="dark" v-on="on">
                          <v-icon>mdi-text-box-plus-outline</v-icon>
                        </v-btn>
                      </template>

                      <InstrucMenuFiles
                        @instrucdialogoption="instrucOpenFileDialog"
                        :instrucOptionCall="modulo"
                        :instrucType="'modulo'"
                      />
                    </v-menu>

                    <!-- Menu para criação de arquivos-->
                    <v-menu
                      top="top"
                      width="300px"
                      origin="center center"
                      :offset-y="true"
                      transition="scale-transition"
                    >
                      <template v-slot:activator="{ on }">
                        <v-btn icon="icon" color="white" dark="dark" v-on="on">
                          <v-icon>mdi-dots-horizontal</v-icon>
                        </v-btn>
                      </template>

                      <MenuFiles
                        @dialogoption="openFileDialog"
                        :optionCall="modulo"
                        :type="'modulo'"
                      />
                    </v-menu>
                    <!--Formulario para adição de submódulo ou conceitos-->
                    <v-menu
                      top="top"
                      width="300px"
                      origin="center center"
                      :offset-y="true"
                      transition="scale-transition"
                    >
                      <template v-slot:activator="{ on }">
                        <v-btn icon="icon" color="white" dark="dark" v-on="on">
                          <v-icon>mdi-plus</v-icon>
                        </v-btn>
                      </template>

                      <v-list>
                        <v-list-item @click="setmodulo(modulo);dialog_conceito=true">
                          <v-list-item-title>Conceito</v-list-item-title>
                        </v-list-item>
                        <v-list-item @click="setmodulo(modulo);dialog_submodulo=true">
                          <v-list-item-title>Submódulo</v-list-item-title>
                        </v-list-item>
                      </v-list>
                    </v-menu>
                    <!--Formulario para edição do modulo-->
                    <v-btn
                      icon="icon"
                      color="white"
                      @click="dialog_modulo=true;setmodulo(modulo)"
                    >
                      <v-icon>mdi-pencil</v-icon>
                    </v-btn>
                    <!--Função para excluir módulo-->
                    <v-btn
                      icon="icon"
                      color="white"
                      @click="auxElementDelete = modulo; alertDelete = true"
                    >
                      <v-icon>mdi-delete</v-icon>
                    </v-btn>
                  </div>
                </v-col>
              </v-row>
            </v-expansion-panel-header>
            <!--FIM DO HEADER DO MÓDULO-->

            <v-expansion-panel-content>
              <!--CONTENT DO MÓDULO-->
              <!-- PANELS DOS ARQUIVOS DOS MÓDULOS-->
              <v-expansion-panels
                v-for="(mobilemedia) in modulo.mobilemedias"
                :key="mobilemedia.url"
                class="mt-2 mb-2"
              >
                <v-expansion-panel>
                  <v-expansion-panel-header color="#A5A5A5" style="color:white; height: 55px;">
                    <v-row>
                      <v-col class="d-flex align-center" style="height:100%;">
                        <div style="vertical-align:middle;" class="mt-3">
                          <p>
                            <v-icon
                              color="white"
                              large
                            >{{fileTypesIcon[(mobilemedia.fk_idmediatype).split("/")[4]-1]}}</v-icon>
                            {{mobilemediaTypeLabel[parseInt((mobilemedia.fk_idmediatype).split("/")[4]-1)]}}
                          </p>
                        </div>
                      </v-col>
                      <v-col cols="4" class="d-flex align-center justify-end">
                        <div class="d-flex justify-end mr-1 align-center">
                          <!--Formulario para edição do arquivo/mobilemedia-->
                          <v-btn
                            icon="icon"
                            color="white"
                            @click="setmobilemedia(mobilemedia, dominio, 'dominio')"
                          >
                            <v-icon>mdi-pencil</v-icon>
                          </v-btn>
                          <!--Função para excluir arquivo/mobilemedia-->
                          <v-btn
                            icon="icon"
                            color="white"
                            @click="auxElementDelete = mobilemedia; alertDelete=true"
                          >
                            <v-icon>mdi-delete</v-icon>
                          </v-btn>
                        </div>
                      </v-col>
                    </v-row>
                  </v-expansion-panel-header>

                  <v-expansion-panel-content>
                    <br />
                    <span v-if="mobilemedia.urllink">{{mobilemedia.urllink}}</span>
                    <span v-if="mobilemedia.textfull" style="white-space: pre-line">
                      <strong>Texto completo:</strong>
                      <br />
                      {{mobilemedia.textfull}}
                      <br />
                    </span>

                    <span v-if="mobilemedia.textshort" style="white-space: pre-line">
                      <strong>Texto resumido:</strong>
                      <br />
                      {{mobilemedia.textshort}}
                    </span>
                  </v-expansion-panel-content>
                </v-expansion-panel>
              </v-expansion-panels>
              <!-- FIM DOS PANELS DOS ARQUIVOS DOS MÓDULOS-->
              <!--LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DOS MÓDULOS-->
              <v-expansion-panels
                v-for="(instrucelement) in instrucElementsSearch(modulo)"
                :key="instrucelement.url"
                class="mt-2 mb-2"
              >
                <v-expansion-panel>
                  <v-expansion-panel-header color="#A5A5A5" style="color:white; height: 55px;">
                    <v-row>
                      <v-col class="d-flex align-center" style="height:100%;">
                        <div style="vertical-align:middle;" class="mt-3">
                          <p>
                            <v-icon
                              color="white"
                              large
                            >{{instrucTypesIcon[(instrucelement.fk_instructionalelementtype).split("/")[4]-1]}}</v-icon>
                            <span
                              v-if="instrucelement.label.length <= 40"
                            >{{instrucelement.label}}</span>
                            <span v-else>{{instrucelement.label.slice(0,40)}}...</span>
                          </p>
                        </div>
                      </v-col>
                      <v-col cols="4" class="d-flex align-center justify-end">
                        <div class="d-flex justify-end mr-1 align-center">
                          <!--Formulario para edição dos ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                          <v-btn
                            icon="icon"
                            color="white"
                            @click="setinstructionalelement(instrucelement, dominio, 'dominio')"
                          >
                            <v-icon>mdi-pencil</v-icon>
                          </v-btn>
                          <!--Função para excluir ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                          <v-btn
                            icon="icon"
                            color="white"
                            @click="auxElementDelete = instrucelement; alertDelete=true"
                          >
                            <v-icon>mdi-delete</v-icon>
                          </v-btn>
                        </div>
                      </v-col>
                    </v-row>
                  </v-expansion-panel-header>

                  <v-expansion-panel-content></v-expansion-panel-content>
                </v-expansion-panel>
              </v-expansion-panels>
              <!-- FIM DA LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DOS MÓDULOS-->
              <!--Panels dos SubMódulos-->
              <v-expansion-panels v-model="vModelPanelSubmodules" multiple>
                <v-expansion-panel
                  v-for="(submodulo, isubmodulo) in modulo.submodules"
                  :key="isubmodulo"
                  class="mt-2 mb-2"
                >
                  <v-expansion-panel-header color="#71CB97" style="color:white; height: 55px;">
                    <!--HEADER DO SUBMÓDULO-->
                    <v-row>
                      <v-col class="d-flex align-center" style="height:100%;">
                        <v-avatar color="white" size="38" class="mr-2">
                          <span class="black--text" style="font-size:1.2em;">SM</span>
                        </v-avatar>
                        <div style="vertical-align:middle;" class="mt-2">
                          <p>
                            <strong
                              v-if="submodulo.namemodule <= 40"
                              style="font-size:1.2em;"
                            >{{submodulo.namemodule}}</strong>
                            <strong v-else style="font-size:1.2em;">{{submodulo.namemodule}}</strong>
                            <br />
                            <span
                              style="font-size:0.9em;"
                              v-if="submodulo.subtitle && submodulo.subtitle.length <= 40"
                            >{{submodulo.subtitle}}</span>
                            <span
                              style="font-size:0.9em;"
                              v-if="submodulo.subtitle && submodulo.subtitle.length > 40"
                            >{{submodulo.subtitle}}</span>
                          </p>
                        </div>
                      </v-col>
                      <v-col cols="4" class="d-flex align-center justify-end">
                        <div class="d-flex justify-end mr-1 align-center">
                          <!--Menu para criação de elementos instrucionais do SubMódulo-->
                          <v-menu
                            top="top"
                            width="300px"
                            origin="center center"
                            :offset-y="true"
                            transition="scale-transition"
                          >
                            <template v-slot:activator="{ on }">
                              <v-btn icon="icon" color="white" dark="dark" v-on="on">
                                <v-icon>mdi-text-box-plus-outline</v-icon>
                              </v-btn>
                            </template>

                            <InstrucMenuFiles
                              @instrucdialogoption="instrucOpenFileDialog"
                              :instrucOptionCall="submodulo"
                              :instrucType="'modulo'"
                            />
                          </v-menu>
                          <!-- Menu para criação de arquivos-->
                          <v-menu
                            top="top"
                            width="300px"
                            origin="center center"
                            :offset-y="true"
                            transition="scale-transition"
                          >
                            <template v-slot:activator="{ on }">
                              <v-btn icon="icon" color="white" dark="dark" v-on="on">
                                <v-icon>mdi-dots-horizontal</v-icon>
                              </v-btn>
                            </template>

                            <MenuFiles
                              @dialogoption="openFileDialog"
                              :optionCall="submodulo"
                              :type="'modulo'"
                            />
                          </v-menu>
                          <!--Formulario para adição de conceito-->
                          <v-btn
                            icon="icon"
                            color="white"
                            @click="setmodulo(submodulo);dialog_conceito=true"
                          >
                            <v-icon>mdi-plus</v-icon>
                          </v-btn>

                          <!--Formulario para edição do submodulo-->
                          <v-btn
                            icon="icon"
                            color="white"
                            @click="setsubmodulo(submodulo);dialog_submodulo=true"
                          >
                            <v-icon>mdi-pencil</v-icon>
                          </v-btn>
                          <!--Função para excluir submódulo-->
                          <v-btn
                            icon="icon"
                            color="white"
                            @click="auxElementDelete = submodulo; alertDelete = true"
                          >
                            <v-icon>mdi-delete</v-icon>
                          </v-btn>
                        </div>
                      </v-col>
                    </v-row>
                  </v-expansion-panel-header>
                  <!--FIM DO HEADER DO SUBMÓDULO-->

                  <v-expansion-panel-content>
                    <!--CONTENT DO SUBMODULO-->
                    <!--LISTAGEM DOS ARQUIVOS DOS SUBMÓULOS-->
                    <v-expansion-panels
                      v-for="(mobilemedia) in submodulo.mobilemedias"
                      :key="mobilemedia.url"
                      class="mt-2 mb-2"
                    >
                      <v-expansion-panel>
                        <v-expansion-panel-header
                          color="#A5A5A5"
                          style="color:white; height: 55px;"
                        >
                          <v-row>
                            <v-col class="d-flex align-center" style="height:100%;">
                              <div style="vertical-align:middle;" class="mt-3">
                                <p>
                                  <v-icon
                                    color="white"
                                    large
                                  >{{fileTypesIcon[(mobilemedia.fk_idmediatype).split("/")[4]-1]}}</v-icon>
                                  {{mobilemediaTypeLabel[parseInt((mobilemedia.fk_idmediatype).split("/")[4]-1)]}}
                                </p>
                              </div>
                            </v-col>
                            <v-col cols="4" class="d-flex align-center justify-end">
                              <div class="d-flex justify-end mr-1 align-center">
                                <!--Formulario para edição do arquivo/mobilemedia-->
                                <v-btn
                                  icon="icon"
                                  color="white"
                                  @click="setmobilemedia(mobilemedia, dominio, 'dominio')"
                                >
                                  <v-icon>mdi-pencil</v-icon>
                                </v-btn>
                                <!--Função para excluir arquivo/mobilemedia-->
                                <v-btn
                                  icon="icon"
                                  color="white"
                                  @click="auxElementDelete = mobilemedia; alertDelete=true"
                                >
                                  <v-icon>mdi-delete</v-icon>
                                </v-btn>
                              </div>
                            </v-col>
                          </v-row>
                        </v-expansion-panel-header>

                        <v-expansion-panel-content>
                          <br />
                          <span v-if="mobilemedia.urllink">{{mobilemedia.urllink}}</span>
                          <span v-if="mobilemedia.textfull" style="white-space: pre-line">
                            <strong>Texto completo:</strong>
                            <br />
                            {{mobilemedia.textfull}}
                            <br />
                          </span>

                          <span v-if="mobilemedia.textshort" style="white-space: pre-line">
                            <strong>Texto resumido:</strong>
                            <br />
                            {{mobilemedia.textshort}}
                          </span>
                        </v-expansion-panel-content>
                      </v-expansion-panel>
                    </v-expansion-panels>
                    <!--FIM DA LISTAGEM DOS ARQUIVOS DOS SUBMÓULOS-->
                    <!--LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DOS SUBMÓULOS-->
                    <v-expansion-panels
                      v-for="(instrucelement) in instrucElementsSearch(submodulo)"
                      :key="instrucelement.url"
                      class="mt-2 mb-2"
                    >
                      <v-expansion-panel>
                        <v-expansion-panel-header
                          color="#A5A5A5"
                          style="color:white; height: 55px;"
                        >
                          <v-row>
                            <v-col class="d-flex align-center" style="height:100%;">
                              <div style="vertical-align:middle;" class="mt-3">
                                <p>
                                  <v-icon
                                    color="white"
                                    large
                                  >{{instrucTypesIcon[(instrucelement.fk_instructionalelementtype).split("/")[4]-1]}}</v-icon>
                                  <span
                                    v-if="instrucelement.label.length <= 40"
                                  >{{instrucelement.label}}</span>
                                  <span v-else>{{instrucelement.label.slice(0,40)}}...</span>
                                </p>
                              </div>
                            </v-col>
                            <v-col cols="4" class="d-flex align-center justify-end">
                              <div class="d-flex justify-end mr-1 align-center">
                                <!--Formulario para edição dos ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                                <v-btn
                                  icon="icon"
                                  color="white"
                                  @click="setinstructionalelement(instrucelement, dominio, 'dominio')"
                                >
                                  <v-icon>mdi-pencil</v-icon>
                                </v-btn>
                                <!--Função para excluir ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                                <v-btn
                                  icon="icon"
                                  color="white"
                                  @click="auxElementDelete = instrucelement; alertDelete=true"
                                >
                                  <v-icon>mdi-delete</v-icon>
                                </v-btn>
                              </div>
                            </v-col>
                          </v-row>
                        </v-expansion-panel-header>

                        <v-expansion-panel-content></v-expansion-panel-content>
                      </v-expansion-panel>
                    </v-expansion-panels>
                    <!-- FIM DA LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DOS SUBMÓULOS-->
                    <!--Panels dos conceitos adicionados dentro de submódulos-->
                    <v-expansion-panels v-model="vModelPanelConceptsSubmodule" multiple>
                      <v-expansion-panel
                        v-for="(conceito, iconceitosubmodulo) in submodulo.concepts"
                        :key="iconceitosubmodulo"
                        class="mt-2 mb-2"
                      >
                        <v-expansion-panel-header
                          color="#3B83FF"
                          style="color:white; height: 55px;"
                        >
                          <!--HEADER DOS CONCEITOS DOS SUBMÓDULOS-->
                          <v-row>
                            <v-col>
                              <p class="mt-3">
                                <span
                                  v-if="conceito.nameconcept.length <= 40"
                                  style="font-size:1.2em;"
                                >
                                  <strong>{{ conceito.nameconcept }}</strong>
                                </span>
                                <span v-else style="font-size:1.2em;">
                                  <strong>{{ conceito.nameconcept.slice(0,40)}}</strong>...
                                </span>
                              </p>
                            </v-col>
                            <v-col cols="4" class="d-flex justify-end mr-1">
                              <!--Menu para criação de elementos instrucionais dos conceitos adicionados dentro de submódulos-->
                              <v-menu
                                top="top"
                                width="300px"
                                origin="center center"
                                :offset-y="true"
                                transition="scale-transition"
                              >
                                <template v-slot:activator="{ on }">
                                  <v-btn icon="icon" color="white" dark="dark" v-on="on">
                                    <v-icon>mdi-text-box-plus-outline</v-icon>
                                  </v-btn>
                                </template>

                                <InstrucMenuFiles
                                  @instrucdialogoption="instrucOpenFileDialog"
                                  :instrucOptionCall="conceito"
                                  :instrucType="'conceito'"
                                />
                              </v-menu>

                              <!-- Menu para criação de arquivos dos conceitos adicionados dentro de submódulos-->
                              <v-menu
                                top="top"
                                width="300px"
                                origin="center center"
                                :offset-y="true"
                                transition="scale-transition"
                              >
                                <template v-slot:activator="{ on }">
                                  <v-btn icon="icon" color="white" dark="dark" v-on="on">
                                    <v-icon>mdi-dots-horizontal</v-icon>
                                  </v-btn>
                                </template>

                                <MenuFiles
                                  @dialogoption="openFileDialog"
                                  :optionCall="conceito"
                                  :type="'conceito'"
                                />
                              </v-menu>
                              <!--Formulario para adição de itens de informação dos conceitos adicionados dentro de submódulos-->
                              <v-menu
                                top="top"
                                width="300px"
                                origin="center center"
                                :offset-y="true"
                                transition="scale-transition"
                              >
                                <template v-slot:activator="{ on }">
                                  <v-btn icon="icon" color="white" dark="dark" v-on="on">
                                    <v-icon>mdi-plus</v-icon>
                                  </v-btn>
                                </template>
                                <v-list>
                                  <v-list-item
                                    @click="setconceito(conceito, modulo);dialog_procedure=true"
                                  >
                                    <v-list-item-title>Procedimento</v-list-item-title>
                                  </v-list-item>
                                </v-list>
                              </v-menu>
                              <!--Formulario para edição dos conceitos adicionados dentro de submódulos-->
                              <v-btn
                                icon="icon"
                                color="white"
                                @click="setconceito(conceito, submodulo);dialog_conceito=true"
                              >
                                <v-icon>mdi-pencil</v-icon>
                              </v-btn>
                              <!--Função para excluir conceito-->
                              <v-btn
                                icon="icon"
                                color="white"
                                @click="auxElementDelete = conceito; alertDelete = true"
                              >
                                <v-icon>mdi-delete</v-icon>
                              </v-btn>
                            </v-col>
                          </v-row>
                        </v-expansion-panel-header>
                        <!--FIM DO HEADER DOS CONCEITOS DOS SUBMÓDULOS-->

                        <v-expansion-panel-content>
                          <!--INÍCIO DO CONTENT DOS CONCEITOS DOS SUBMÓDULOS-->
                          <!-- Listagem dos relacionamentos dos conceitos adicionados dentro de submódulos -->
                          <h3
                            class="mt-2"
                            v-if="conceito.sourceconcept.length > 0"
                          >Relacionamentos:</h3>
                          <v-simple-table v-if="conceito.sourceconcept.length > 0">
                            <template v-slot:default>
                              <thead>
                                <tr>
                                  <th class="text-left">Conceito Alvo</th>
                                  <th class="text-left">Nome da Relação</th>
                                  <th class="text-left">Tipo da Relação</th>
                                </tr>
                              </thead>
                              <tbody>
                                <tr v-for="relacao in conceito.sourceconcept" :key="relacao.url">
                                  <td>{{findNameTarget(submodulo.concepts, relacao)}}</td>
                                  <td>{{relacao.namereference}}</td>
                                  <td>{{findTipoRelation(relacao.fk_referencetype)}}</td>
                                </tr>
                              </tbody>
                            </template>
                          </v-simple-table>
                          <!-- Listagem dos arquivos dos conceitos DOS SUBMÓDULOS-->
                          <v-expansion-panels
                            v-for="(mobilemedia) in conceito.mobilemedias"
                            :key="mobilemedia.url"
                            class="mt-2 mb-2"
                          >
                            <v-expansion-panel>
                              <!--LISTAGEM DOS ARQUIVOS DOS CONCEITOS DOS SUBMODULOS -->
                              <v-expansion-panel-header
                                color="#A5A5A5"
                                style="color:white; height: 55px;"
                              >
                                <v-row>
                                  <v-col class="d-flex align-center" style="height:100%;">
                                    <div style="vertical-align:middle;" class="mt-3">
                                      <p>
                                        <v-icon
                                          color="white"
                                          large
                                        >{{fileTypesIcon[(mobilemedia.fk_idmediatype).split("/")[4]-1]}}</v-icon>
                                        {{mobilemediaTypeLabel[parseInt((mobilemedia.fk_idmediatype).split("/")[4]-1)]}}
                                      </p>
                                    </div>
                                  </v-col>
                                  <v-col cols="4" class="d-flex align-center justify-end">
                                    <div class="d-flex justify-end mr-1 align-center">
                                      <!--Formulario para edição do arquivo/mobilemedia-->
                                      <v-btn
                                        icon="icon"
                                        color="white"
                                        @click="setmobilemedia(mobilemedia, dominio, 'dominio')"
                                      >
                                        <v-icon>mdi-pencil</v-icon>
                                      </v-btn>
                                      <!--Função para excluir arquivo/mobilemedia-->
                                      <v-btn
                                        icon="icon"
                                        color="white"
                                        @click="auxElementDelete = mobilemedia; alertDelete=true"
                                      >
                                        <v-icon>mdi-delete</v-icon>
                                      </v-btn>
                                    </div>
                                  </v-col>
                                </v-row>
                              </v-expansion-panel-header>

                              <v-expansion-panel-content>
                                <br />
                                <span v-if="mobilemedia.urllink">{{mobilemedia.urllink}}</span>
                                <span v-if="mobilemedia.textfull" style="white-space: pre-line">
                                  <strong>Texto completo:</strong>
                                  <br />
                                  {{mobilemedia.textfull}}
                                  <br />
                                </span>

                                <span v-if="mobilemedia.textshort" style="white-space: pre-line">
                                  <strong>Texto resumido:</strong>
                                  <br />
                                  {{mobilemedia.textshort}}
                                </span>
                              </v-expansion-panel-content>
                            </v-expansion-panel>
                          </v-expansion-panels>
                          <!--FIM DA LISTAGEM DOS ARQUIVOS DOS CONCEITOS DOS SUBMODULOS -->
                          <!--LISTAGEM DOS PROCEDURES DOS CONCEITOS DOS SUBMÓDULOS-->
                          <v-expansion-panels
                            v-for="(procedure) in proceduresUnderConcept(conceito)"
                            :key="procedure.url"
                            class="mt-2 mb-2"
                          >
                            <v-expansion-panel>
                              <v-expansion-panel-header
                                color="#A5A5A5"
                                style="color:white; height: 55px;"
                              >
                                <v-row>
                                  <v-col>
                                    <p
                                      class="mt-3"
                                    >[Procedimento] {{procedure.nameinformationitem}}</p>
                                  </v-col>
                                  <v-col cols="4" class="d-flex justify-end mr-1">
                                    <!--Formulario para edição do procedure-->
                                    <v-btn
                                      class="mt-2"
                                      icon="icon"
                                      color="white"
                                      @click="setprocedimento(procedure, conceito, submodulo); dialog_procedure=true"
                                    >
                                      <v-icon>mdi-pencil</v-icon>
                                    </v-btn>
                                    <!--Função para excluir arquivo/mobilemedia-->
                                    <v-btn
                                      class="mt-2"
                                      icon="icon"
                                      color="white"
                                      @click="auxElementDelete = procedure; alertDelete = true"
                                    >
                                      <v-icon>mdi-delete</v-icon>
                                    </v-btn>
                                  </v-col>
                                </v-row>
                              </v-expansion-panel-header>

                              <v-expansion-panel-content>
                                <v-row class="mt-2 ml-1">{{procedure.descriptioninformationitem}}</v-row>
                                <!--LISTAGEM DAS FASES DOS PROCEDURES DOS CONCEITOS DOS SUBMÓDULOS-->
                                <h3 class="mt-2">Fases do procedimento:</h3>
                                <v-simple-table>
                                  <template v-slot:default>
                                    <thead>
                                      <tr>
                                        <th class="text-left" style="width:160px;">Ordem da fase</th>
                                        <th class="text-left">Descrição</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      <tr
                                        v-for="fase in procedure.phaseprocedures"
                                        :key="fase.url"
                                      >
                                        <td>{{fase.order}}</td>
                                        <td>{{fase.description}}</td>
                                      </tr>
                                    </tbody>
                                  </template>
                                </v-simple-table>
                                <!--FIM DA LISTAGEM DAS FASES DOS PROCEDURES DOS CONCEITOS DOS SUBMÓDULOS-->
                              </v-expansion-panel-content>
                            </v-expansion-panel>
                          </v-expansion-panels>
                          <!-- FIM DA LISTAGEM DOS PROCEDURES DOS CONCEITOS DOS SUBMÓDULOS -->
                          <!--LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DOS CONCEITOS DOS SUBMÓDULOS-->
                          <v-expansion-panels
                            v-for="(instrucelement) in instrucElementsSearch(conceito)"
                            :key="instrucelement.url"
                            class="mt-2 mb-2"
                          >
                            <v-expansion-panel>
                              <v-expansion-panel-header
                                color="#A5A5A5"
                                style="color:white; height: 55px;"
                              >
                                <v-row>
                                  <v-col class="d-flex align-center" style="height:100%;">
                                    <div style="vertical-align:middle;" class="mt-3">
                                      <p>
                                        <v-icon
                                          color="white"
                                          large
                                        >{{instrucTypesIcon[(instrucelement.fk_instructionalelementtype).split("/")[4]-1]}}</v-icon>
                                        <span
                                          v-if="instrucelement.label.length <= 40"
                                        >{{instrucelement.label}}</span>
                                        <span v-else>{{instrucelement.label.slice(0,40)}}...</span>
                                      </p>
                                    </div>
                                  </v-col>
                                  <v-col cols="4" class="d-flex align-center justify-end">
                                    <div class="d-flex justify-end mr-1 align-center">
                                      <!--Formulario para edição dos ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                                      <v-btn
                                        icon="icon"
                                        color="white"
                                        @click="setinstructionalelement(instrucelement, dominio, 'dominio')"
                                      >
                                        <v-icon>mdi-pencil</v-icon>
                                      </v-btn>
                                      <!--Função para excluir ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                                      <v-btn
                                        icon="icon"
                                        color="white"
                                        @click="auxElementDelete = instrucelement; alertDelete=true"
                                      >
                                        <v-icon>mdi-delete</v-icon>
                                      </v-btn>
                                    </div>
                                  </v-col>
                                </v-row>
                              </v-expansion-panel-header>

                              <v-expansion-panel-content></v-expansion-panel-content>
                            </v-expansion-panel>
                          </v-expansion-panels>
                          <!-- FIM DA LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DOS CONCEITOS DOS SUBMÓDULOS-->
                        </v-expansion-panel-content>
                        <!--FIM DO CONTENT DOS CONCEITOS DOS SUBMÓDULOS-->
                      </v-expansion-panel>
                    </v-expansion-panels>

                    <!--FIM DO CONTENT PANELS DOS SUBMÓDULOS-->
                  </v-expansion-panel-content>
                </v-expansion-panel>
              </v-expansion-panels>

              <!-- Panels dos Conceitos dos Módulos-->
              <v-expansion-panels v-model="vModelPanelConceptsModule" multiple>
                <v-expansion-panel
                  v-for="(conceito, iconceitomodulo) in modulo.concepts"
                  :key="iconceitomodulo"
                  class="mt-2 mb-2"
                >
                  <v-expansion-panel-header color="#3B83FF" style="color:white; height: 55px;">
                    <!--HEADER DOS CONCEITOS DOS MÓDULOS-->
                    <v-row>
                      <v-col>
                        <p class="mt-3">
                          <span v-if="conceito.nameconcept.length <= 40" style="font-size:1.2em;">
                            <strong>{{ conceito.nameconcept }}</strong>
                          </span>
                          <span v-else style="font-size:1.2em;">
                            <strong>{{ conceito.nameconcept.slice(0,40)}}</strong>...
                          </span>
                        </p>
                      </v-col>
                      <v-col cols="4" class="d-flex justify-end mr-1">
                        <!--Menu para criação de elementos instrucionais dos conceitos adicionados dentro de submódulos-->
                        <v-menu
                          top="top"
                          width="300px"
                          origin="center center"
                          :offset-y="true"
                          transition="scale-transition"
                        >
                          <template v-slot:activator="{ on }">
                            <v-btn icon="icon" color="white" dark="dark" v-on="on">
                              <v-icon>mdi-text-box-plus-outline</v-icon>
                            </v-btn>
                          </template>

                          <InstrucMenuFiles
                            @instrucdialogoption="instrucOpenFileDialog"
                            :instrucOptionCall="conceito"
                            :instrucType="'conceito'"
                          />
                        </v-menu>
                        <!-- Menu para criação de arquivos dos conceitos dos modulos-->
                        <v-menu
                          top="top"
                          width="300px"
                          origin="center center"
                          :offset-y="true"
                          transition="scale-transition"
                        >
                          <template v-slot:activator="{ on }">
                            <v-btn icon="icon" color="white" dark="dark" v-on="on">
                              <v-icon>mdi-dots-horizontal</v-icon>
                            </v-btn>
                          </template>

                          <MenuFiles
                            @dialogoption="openFileDialog"
                            :optionCall="conceito"
                            :type="'conceito'"
                          />
                        </v-menu>
                        <!--Formulario para adição de itens de informação dos conceitos dos modulos-->
                        <v-menu
                          top="top"
                          width="300px"
                          origin="center center"
                          :offset-y="true"
                          transition="scale-transition"
                        >
                          <template v-slot:activator="{ on }">
                            <v-btn icon="icon" color="white" dark="dark" v-on="on">
                              <v-icon>mdi-plus</v-icon>
                            </v-btn>
                          </template>

                          <v-list>
                            <v-list-item
                              @click="setconceito(conceito, modulo);dialog_procedure=true"
                            >
                              <v-list-item-title>Procedimento</v-list-item-title>
                            </v-list-item>
                          </v-list>
                        </v-menu>
                        <!--Formulario para edição do conceito-->
                        <v-btn
                          icon="icon"
                          color="white"
                          @click="setconceito(conceito, modulo);dialog_conceito=true"
                        >
                          <v-icon>mdi-pencil</v-icon>
                        </v-btn>
                        <!--Função para excluir conceito-->
                        <v-btn
                          icon="icon"
                          color="white"
                          @click="auxElementDelete = conceito; alertDelete = true"
                        >
                          <v-icon>mdi-delete</v-icon>
                        </v-btn>
                      </v-col>
                    </v-row>
                  </v-expansion-panel-header>
                  <!--FIM DO HEADER DOS CONCEITOS DOS MÓDULOS-->

                  <v-expansion-panel-content>
                    <!-- Listagem dos relacionamentos do conceito dos módulos -->
                    <h3 class="mt-2" v-if="conceito.sourceconcept.length > 0">Relacionamentos:</h3>
                    <v-simple-table v-if="conceito.sourceconcept.length > 0">
                      <template v-slot:default>
                        <thead>
                          <tr>
                            <th class="text-left">Conceito Alvo</th>
                            <th class="text-left">Nome da Relação</th>
                            <th class="text-left">Tipo da Relação</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr v-for="relacao in conceito.sourceconcept" :key="relacao.url">
                            <td>{{findNameTarget(modulo.concepts, relacao)}}</td>
                            <td>{{relacao.namereference}}</td>
                            <td>{{findTipoRelation(relacao.fk_referencetype)}}</td>
                          </tr>
                        </tbody>
                      </template>
                    </v-simple-table>

                    <!--LISTAGEM DOS ARQUIVOS DOS CONCEITOS DOS MÓDULOS-->
                    <v-expansion-panels
                      v-for="(mobilemedia) in conceito.mobilemedias"
                      :key="mobilemedia.url"
                      class="mt-2 mb-2"
                    >
                      <v-expansion-panel>
                        <v-expansion-panel-header
                          color="#A5A5A5"
                          style="color:white; height: 55px;"
                        >
                          <v-row>
                            <v-col class="d-flex align-center" style="height:100%;">
                              <div style="vertical-align:middle;" class="mt-3">
                                <p>
                                  <v-icon
                                    color="white"
                                    large
                                  >{{fileTypesIcon[(mobilemedia.fk_idmediatype).split("/")[4]-1]}}</v-icon>
                                  {{mobilemediaTypeLabel[parseInt((mobilemedia.fk_idmediatype).split("/")[4]-1)]}}
                                </p>
                              </div>
                            </v-col>
                            <v-col cols="4" class="d-flex align-center justify-end">
                              <div class="d-flex justify-end mr-1 align-center">
                                <!--Formulario para edição do arquivo/mobilemedia-->
                                <v-btn
                                  icon="icon"
                                  color="white"
                                  @click="setmobilemedia(mobilemedia, dominio, 'dominio')"
                                >
                                  <v-icon>mdi-pencil</v-icon>
                                </v-btn>
                                <!--Função para excluir arquivo/mobilemedia-->
                                <v-btn
                                  icon="icon"
                                  color="white"
                                  @click="auxElementDelete = mobilemedia; alertDelete=true"
                                >
                                  <v-icon>mdi-delete</v-icon>
                                </v-btn>
                              </div>
                            </v-col>
                          </v-row>
                        </v-expansion-panel-header>

                        <v-expansion-panel-content>
                          <br />
                          <span v-if="mobilemedia.urllink">{{mobilemedia.urllink}}</span>
                          <span v-if="mobilemedia.textfull" style="white-space: pre-line">
                            <strong>Texto completo:</strong>
                            <br />
                            {{mobilemedia.textfull}}
                            <br />
                          </span>

                          <span v-if="mobilemedia.textshort" style="white-space: pre-line">
                            <strong>Texto resumido:</strong>
                            <br />
                            {{mobilemedia.textshort}}
                          </span>
                        </v-expansion-panel-content>
                      </v-expansion-panel>
                    </v-expansion-panels>
                    <!-- FIM DA LISTAGEM DOS ARQUIVOS DOS CONCEITOS DOS MÓDULOS -->

                    <!--LISTAGEM DOS PROCEDURES DOS CONCEITOS DOS MÓDULOS-->
                    <v-expansion-panels
                      v-for="(procedure) in proceduresUnderConcept(conceito)"
                      :key="procedure.url"
                      class="mt-2 mb-2"
                    >
                      <v-expansion-panel>
                        <v-expansion-panel-header
                          color="#A5A5A5"
                          style="color:white; height: 55px;"
                        >
                          <v-row>
                            <v-col>
                              <p class="mt-3">[Procedimento] {{procedure.nameinformationitem}}</p>
                            </v-col>
                            <v-col cols="4" class="d-flex justify-end mr-1">
                              <!--Formulario para edição do procedure-->
                              <v-btn
                                class="mt-2"
                                icon="icon"
                                color="white"
                                @click="setprocedimento(procedure, conceito, modulo); dialog_procedure=true"
                              >
                                <v-icon>mdi-pencil</v-icon>
                              </v-btn>
                              <!--Função para excluir arquivo/mobilemedia-->
                              <v-btn
                                class="mt-2"
                                icon="icon"
                                color="white"
                                @click="auxElementDelete = procedure; alertDelete = true"
                              >
                                <v-icon>mdi-delete</v-icon>
                              </v-btn>
                            </v-col>
                          </v-row>
                        </v-expansion-panel-header>

                        <v-expansion-panel-content>
                          <v-row class="mt-2 ml-1">{{procedure.descriptioninformationitem}}</v-row>
                          <!--LISTAGEM DAS FASES DOS PROCEDURES DOS CONCEITOS DOS MÓDULOS-->
                          <h3 class="mt-2">Fases do procedimento:</h3>
                          <v-simple-table>
                            <template v-slot:default>
                              <thead>
                                <tr>
                                  <th class="text-left" style="width:160px;">Ordem da fase</th>
                                  <th class="text-left">Descrição</th>
                                </tr>
                              </thead>
                              <tbody>
                                <tr v-for="fase in procedure.phaseprocedures" :key="fase.url">
                                  <td>{{fase.order}}</td>
                                  <td>{{fase.description}}</td>
                                </tr>
                              </tbody>
                            </template>
                          </v-simple-table>
                          <!--FIM DA LISTAGEM DAS FASES DOS PROCEDURES DOS CONCEITOS DOS MÓDULOS-->
                        </v-expansion-panel-content>
                      </v-expansion-panel>
                    </v-expansion-panels>
                    <!-- FIM DA LISTAGEM DOS PROCEDURES DOS CONCEITOS DOS MÓDULOS -->
                    <!--LISTAGEM DOS ELEMENTOS INSTRUCIONAIS DOS CONCEITOS DOS MÓDULOS-->
                    <v-expansion-panels
                      v-for="(instrucelement) in instrucElementsSearch(conceito)"
                      :key="instrucelement.url"
                      class="mt-2 mb-2"
                    >
                      <v-expansion-panel>
                        <v-expansion-panel-header
                          color="#A5A5A5"
                          style="color:white; height: 55px;"
                        >
                          <v-row>
                            <v-col class="d-flex align-center" style="height:100%;">
                              <div style="vertical-align:middle;" class="mt-3">
                                <p>
                                  <v-icon
                                    color="white"
                                    large
                                  >{{instrucTypesIcon[(instrucelement.fk_instructionalelementtype).split("/")[4]-1]}}</v-icon>
                                  <span
                                    v-if="instrucelement.label.length <= 40"
                                  >{{instrucelement.label}}</span>
                                  <span v-else>{{instrucelement.label.slice(0,40)}}...</span>
                                </p>
                              </div>
                            </v-col>
                            <v-col cols="4" class="d-flex align-center justify-end">
                              <div class="d-flex justify-end mr-1 align-center">
                                <!--Formulario para edição dos ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                                <v-btn
                                  icon="icon"
                                  color="white"
                                  @click="setinstructionalelement(instrucelement, dominio, 'dominio')"
                                >
                                  <v-icon>mdi-pencil</v-icon>
                                </v-btn>
                                <!--Função para excluir ELEMENTOS INSTRUCIONAIS do DOMÍNIO-->
                                <v-btn
                                  icon="icon"
                                  color="white"
                                  @click="auxElementDelete = instrucelement; alertDelete=true"
                                >
                                  <v-icon>mdi-delete</v-icon>
                                </v-btn>
                              </div>
                            </v-col>
                          </v-row>
                        </v-expansion-panel-header>

                        <v-expansion-panel-content></v-expansion-panel-content>
                      </v-expansion-panel>
                    </v-expansion-panels>
                    <!-- FIM DA LISTAGEM DOS ELEMENTOS INSTRUCIONAIS  DOS CONCEITOS DOS MÓDULOS-->
                  </v-expansion-panel-content>
                </v-expansion-panel>
              </v-expansion-panels>
              <!-- FIM DOS PANELS DOS CONCEITOS DOS MÓDULOS-->
            </v-expansion-panel-content>
            <!--FIM DO CONTENT DO MÓDULO-->
          </v-expansion-panel>
        </v-expansion-panels>
      </v-expansion-panel-content>
      <!--FIM DO CONTENT DO DOMÍNIO-->
    </v-expansion-panel>
  </v-expansion-panels>
  <v-row class="d-flex justify-end mt-2">
    <v-btn
      color="primary"
      height="49"
      dark
      :disabled="disableBtnDidatic"
      @click="openDidatic();"
      class="mr-1"
    >Modelo Didático</v-btn>
    <v-btn color="success" height="49" dark @click="saveDominio" class="mr-3">
      Salvar Domínio
      <v-icon dark right>mdi-content-save</v-icon>
    </v-btn>
  </v-row>
  <div class="text-center">
    <v-dialog v-model="alertDelete" width="500" persistent="persistent">
      <v-card>
        <v-card-title class="headline red" primary-title style="color:white;">ALERTA!</v-card-title>
        <v-card-text
          class="mt-3"
          style="font-size: 1.3em;"
        >Tem certeza que deseja apagar esse elemento?</v-card-text>
        <v-divider></v-divider>
        <v-card-actions>
          <v-btn color="primary" @click="deleteelemento(auxElementDelete);">Sim</v-btn>
          <v-spacer></v-spacer>
          <v-btn color="red" dark @click="auxElementDelete = ''; alertDelete=false">Não</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </div>
  <div class="text-center">
    <v-dialog v-model="dialogLoading" max-width="290" persistent="persistent">
      <v-card color="primary" dark>
        <v-card-text style="color:white;">
          <v-row class="pt-2 pb-3">
            <br />
            <v-spacer></v-spacer>
            <span style="font-size: 1.3em; color:white;">{{dialogLoadingMessage}}</span>
            <v-spacer></v-spacer>
          </v-row>
          <v-row>
            <v-spacer></v-spacer>
            <v-progress-circular indeterminate color="white" class="mb-0"></v-progress-circular>
            <v-spacer></v-spacer>
          </v-row>
        </v-card-text>
      </v-card>
    </v-dialog>
  </div>
</v-row>
"},null]}