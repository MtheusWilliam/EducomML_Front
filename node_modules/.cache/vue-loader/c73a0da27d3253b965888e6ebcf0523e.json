{"remainingRequest":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\www\\EducomML\\EducomML_Front\\src\\components\\Panels.vue?vue&type=template&id=3a6ccd9f&","dependencies":[{"path":"C:\\www\\EducomML\\EducomML_Front\\src\\components\\Panels.vue","mtime":1597353521000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1597353521000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1597353521000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1597353521000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1597353521000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\index.js","mtime":1597353521000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LXJvdz4KICA8IS0tUGFuZWwgZG8gRG9tw61uaW8tLT4KICA8di1leHBhbnNpb24tcGFuZWxzIHYtbW9kZWw9InZNb2RlbFBhbmVsRG9tYWluIiBtdWx0aXBsZSByZWFkb25seT4KICAgIDx2LWV4cGFuc2lvbi1wYW5lbAogICAgICB2LWZvcj0iKGl0ZW0sIGkpIGluIDEiCiAgICAgIDprZXk9ImkiCiAgICAgIDppZD0iZG9taW5pby51cmwuc3BsaXQoJy8nKVszXSArIGRvbWluaW8uaWRrbm93bGVkZ2Vkb21haW4iCiAgICA+CiAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgY29sb3I9IiM2NjY2NjYiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyI+CiAgICAgICAgPCEtLUhFQURFUiBETyBET03DjU5JTy0tPgogICAgICAgIDx2LXJvdz4KICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IGFsaWduLWNlbnRlciIgc3R5bGU9ImhlaWdodDoxMDAlOyI+CiAgICAgICAgICAgIDx2LWF2YXRhciBjb2xvcj0id2hpdGUiIHNpemU9IjQwIiBjbGFzcz0ibXItMiI+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJsYWNrLS10ZXh0IiBzdHlsZT0iZm9udC1zaXplOjEuMmVtOyI+RE08L3NwYW4+CiAgICAgICAgICAgIDwvdi1hdmF0YXI+CiAgICAgICAgICAgIDxkaXYgc3R5bGU9InZlcnRpY2FsLWFsaWduOm1pZGRsZTsiIGNsYXNzPSJtdC0zIj4KICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIDxzdHJvbmcKICAgICAgICAgICAgICAgICAgdi1pZj0iZG9taW5pb19kYXRhLm5hbWVrbm93bGVkZ2Vkb21haW4ubGVuZ3RoIDw9IDQwIgogICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOjEuMmVtOyIKICAgICAgICAgICAgICAgID57eyBkb21pbmlvX2RhdGEubmFtZWtub3dsZWRnZWRvbWFpbiB9fTwvc3Ryb25nPgogICAgICAgICAgICAgICAgPHN0cm9uZwogICAgICAgICAgICAgICAgICB2LWVsc2UKICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZToxLjJlbTsiCiAgICAgICAgICAgICAgICA+e3sgZG9taW5pb19kYXRhLm5hbWVrbm93bGVkZ2Vkb21haW4uc2xpY2UoMCwgNDApIH19Li4uPC9zdHJvbmc+CiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6MC45ZW07IgogICAgICAgICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICAgICAgICBkb21pbmlvX2RhdGEuc3VidGl0bGUgJiYKICAgICAgICAgICAgICAgICAgICAgIGRvbWluaW9fZGF0YS5zdWJ0aXRsZS5sZW5ndGggPD0gNDAKICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgPnt7IGRvbWluaW9fZGF0YS5zdWJ0aXRsZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6MC45ZW07IgogICAgICAgICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICAgICAgICBkb21pbmlvX2RhdGEuc3VidGl0bGUgJiYgZG9taW5pb19kYXRhLnN1YnRpdGxlLmxlbmd0aCA+IDQwCiAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgID57eyBkb21pbmlvX2RhdGEuc3VidGl0bGUuc2xpY2UoMCwgNDApIH19Li4uPC9zcGFuPgogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPHYtY29sIGNvbHM9IjQiIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIGp1c3RpZnktZW5kIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktZW5kIG1yLTEgYWxpZ24tY2VudGVyIj4KICAgICAgICAgICAgICA8IS0tTWVudSBwYXJhIGNyaWHDp8OjbyBkZSBlbGVtZW50b3MgaW5zdHJ1Y2lvbmFpcyBkbyBEb23DrW5pby0tPgoKICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS10ZXh0LWJveC1wbHVzLW91dGxpbmU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgPEluc3RydWNNZW51RmlsZXMKICAgICAgICAgICAgICAgICAgQGluc3RydWNkaWFsb2dvcHRpb249Imluc3RydWNPcGVuRmlsZURpYWxvZyIKICAgICAgICAgICAgICAgICAgOmluc3RydWNPcHRpb25DYWxsPSJkb21pbmlvIgogICAgICAgICAgICAgICAgICA6aW5zdHJ1Y1R5cGU9Iidkb21pbmlvJyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC92LW1lbnU+CgogICAgICAgICAgICAgIDwhLS0gTWVudSBwYXJhIGNyaWHDp8OjbyBkZSBhcnF1aXZvcy0tPgogICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgIHRvcD0idG9wIgogICAgICAgICAgICAgICAgd2lkdGg9IjMwMHB4IgogICAgICAgICAgICAgICAgb3JpZ2luPSJjZW50ZXIgY2VudGVyIgogICAgICAgICAgICAgICAgOm9mZnNldC15PSJ0cnVlIgogICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgZGFyaz0iZGFyayIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWFwcHM8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgPE1lbnVGaWxlcwogICAgICAgICAgICAgICAgICBAZGlhbG9nb3B0aW9uPSJvcGVuRmlsZURpYWxvZyIKICAgICAgICAgICAgICAgICAgOm9wdGlvbkNhbGw9ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDp0eXBlPSInZG9taW5pbyciCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvdi1tZW51PgoKICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGFkacOnw6NvIGRvIG3Ds2R1bG8tLT4KICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX21vZHVsbyIgcGVyc2lzdGVudD0icGVyc2lzdGVudCIgbWF4LXdpZHRoPSI2MDBweCI+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXBsdXM8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgPE1vZHVsb0RpYWxvZwogICAgICAgICAgICAgICAgICA6bW9kdWxlPSJtb2R1bG8iCiAgICAgICAgICAgICAgICAgIEBjbG9zZV9vcl9zYXZlPSJjbG9zZV9vcl9zYXZlX21vZHVsbyIKICAgICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAgICAgOmRpYWxvZz0iZGlhbG9nX21vZHVsbyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC92LWRpYWxvZz4KCiAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBkb23DrW5pby0tPgogICAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfZG9taW5pbyIgcGVyc2lzdGVudD0icGVyc2lzdGVudCIgbWF4LXdpZHRoPSI2MDBweCI+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXBlbmNpbDwvdi1pY29uPgogICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgY3JpYcOnw6NvIGRlIG3Ds2R1bG8tLT4KICAgICAgICAgICAgICAgIDxEb21pbmlvRGlhbG9nCiAgICAgICAgICAgICAgICAgIEBjbG9zZV9vcl9zYXZlPSJjbG9zZV9vcl9zYXZlX2RvbWluaW8iCiAgICAgICAgICAgICAgICAgIEBkb21pbmlvX2RhdGE9InNldERvbWFpblZhcmlhYmxlcyIKICAgICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pb19kYXRhIgogICAgICAgICAgICAgICAgICA6ZGlhbG9nPSJkaWFsb2dfZG9taW5pbyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC92LWRpYWxvZz4KICAgICAgICAgICAgICA8IS0tIMONY29uZSBwYXJhIGNyaWHDp8OjbyBkZSBtb2RlbG8gZGlkw6F0aWNvLS0+CiAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgOmRpc2FibGVkPSJkaXNhYmxlQnRuRGlkYXRpYyIKICAgICAgICAgICAgICAgIEBjbGljaz0ib3BlbkRpZGF0aWMoKSIKICAgICAgICAgICAgICAgIGNsYXNzPSJtci0xIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWJvb2stb3Blbjwvdi1pY29uPgogICAgICAgICAgICAgIDwvdi1idG4+CgogICAgICAgICAgICAgIDwhLS3DjWNvbmUgcGFyYSBnZXJhciBhcnF1aXZvIGFway0tPgogICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms+CiAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1jb250ZW50LXNhdmU8L3YtaWNvbj4KICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgY3JpYcOnw6NvIGRlIHN1Ym3Ds2R1bG8tLT4KICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX3N1Ym1vZHVsbyIgcGVyc2lzdGVudD0icGVyc2lzdGVudCIgbWF4LXdpZHRoPSI2MDBweCI+CiAgICAgICAgICAgICAgICA8U3ViTW9kdWxvRGlhbG9nCiAgICAgICAgICAgICAgICAgIDpzdWJtb2R1bGU9InN1Ym1vZHVsbyIKICAgICAgICAgICAgICAgICAgOm1vZHVsZT0ibW9kdWxvIgogICAgICAgICAgICAgICAgICBAY2xvc2Vfb3Jfc2F2ZT0iY2xvc2Vfb3Jfc2F2ZV9zdWJtb2R1bG8iCiAgICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDpkaWFsb2c9ImRpYWxvZ19zdWJtb2R1bG8iCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBjcmlhw6fDo28gZGUgY29uY2VpdG8tLT4KICAgICAgICAgICAgICA8di1kaWFsb2cKICAgICAgICAgICAgICAgIHYtbW9kZWw9ImRpYWxvZ19jb25jZWl0byIKICAgICAgICAgICAgICAgIHN0eWxlPSJvdmVyZmxvdy15OiBoaWRkZW47IgogICAgICAgICAgICAgICAgcGVyc2lzdGVudD0icGVyc2lzdGVudCIKICAgICAgICAgICAgICAgIG1heC13aWR0aD0iNzU1cHgiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPENvbmNlaXRvRGlhbG9nCiAgICAgICAgICAgICAgICAgIDpjb25jZXB0PSJjb25jZWl0byIKICAgICAgICAgICAgICAgICAgOm1vZHVsZT0ibW9kdWxvIgogICAgICAgICAgICAgICAgICBAY2xvc2Vfb3Jfc2F2ZT0iY2xvc2Vfb3Jfc2F2ZV9jb25jZWl0byIKICAgICAgICAgICAgICAgICAgQG9wZW5EaWRhdGljRGlhbG9nPSJvcGVuRGlkYXRpY0RpYWxvZyIKICAgICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAgICAgOmRpYWxvZz0iZGlhbG9nX2NvbmNlaXRvIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICAgIDwhLS1GT1JNVUxBUklPUyBQQVJBIENSSUHDh8ODTyBERSBBUlFVSVZPUy0tPgogICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgY3JpYcOnw6NvIGRlIGltYWdlbS0tPgogICAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfaW1hZ2VtIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjgwMHB4Ij4KICAgICAgICAgICAgICAgIDxJbWFnZURpYWxvZwogICAgICAgICAgICAgICAgICBAY2xvc2U9ImRpYWxvZ2Nsb3NlIgogICAgICAgICAgICAgICAgICA6b3B0aW9uQ2FsbD0ib2JqZWN0RmlsZSIKICAgICAgICAgICAgICAgICAgOnR5cGU9InR5cGUiCiAgICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDpkaWFsb2c9ImRpYWxvZ19pbWFnZW0iCiAgICAgICAgICAgICAgICAgIDptb2JpbGVtZWRpYT0ibW9iaWxlbWVkaWEiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBjcmlhw6fDo28gZGUgdmlkZW8tLT4KICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX3ZpZGVvIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjgwMHB4Ij4KICAgICAgICAgICAgICAgIDxWaWRlb0RpYWxvZwogICAgICAgICAgICAgICAgICBAY2xvc2U9ImRpYWxvZ2Nsb3NlIgogICAgICAgICAgICAgICAgICA6b3B0aW9uQ2FsbD0ib2JqZWN0RmlsZSIKICAgICAgICAgICAgICAgICAgOnR5cGU9InR5cGUiCiAgICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDpkaWFsb2c9ImRpYWxvZ192aWRlbyIKICAgICAgICAgICAgICAgICAgOm1vYmlsZW1lZGlhPSJtb2JpbGVtZWRpYSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC92LWRpYWxvZz4KICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGNyaWHDp8OjbyBkZSBhdWRpby0tPgogICAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfYXVkaW8iIHBlcnNpc3RlbnQ9InBlcnNpc3RlbnQiIG1heC13aWR0aD0iODAwcHgiPgogICAgICAgICAgICAgICAgPEF1ZGlvRGlhbG9nCiAgICAgICAgICAgICAgICAgIEBjbG9zZT0iZGlhbG9nY2xvc2UiCiAgICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJvYmplY3RGaWxlIgogICAgICAgICAgICAgICAgICA6dHlwZT0idHlwZSIKICAgICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAgICAgOmRpYWxvZz0iZGlhbG9nX2F1ZGlvIgogICAgICAgICAgICAgICAgICA6bW9iaWxlbWVkaWE9Im1vYmlsZW1lZGlhIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgY3JpYcOnw6NvIGRlIHRleHRvLS0+CiAgICAgICAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZ190ZXh0byIgcGVyc2lzdGVudD0icGVyc2lzdGVudCIgbWF4LXdpZHRoPSI4MDBweCI+CiAgICAgICAgICAgICAgICA8VGV4dERpYWxvZwogICAgICAgICAgICAgICAgICBAY2xvc2U9ImRpYWxvZ2Nsb3NlIgogICAgICAgICAgICAgICAgICA6b3B0aW9uQ2FsbD0ib2JqZWN0RmlsZSIKICAgICAgICAgICAgICAgICAgOnR5cGU9InR5cGUiCiAgICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDpkaWFsb2c9ImRpYWxvZ190ZXh0byIKICAgICAgICAgICAgICAgICAgOm1vYmlsZW1lZGlhPSJtb2JpbGVtZWRpYSIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC92LWRpYWxvZz4KICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGNyaWHDp8OjbyBkZSBsaW5rLS0+CiAgICAgICAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZ19saW5rIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjgwMHB4Ij4KICAgICAgICAgICAgICAgIDxMaW5rRGlhbG9nCiAgICAgICAgICAgICAgICAgIEBjbG9zZT0iZGlhbG9nY2xvc2UiCiAgICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJvYmplY3RGaWxlIgogICAgICAgICAgICAgICAgICA6dHlwZT0idHlwZSIKICAgICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAgICAgOmRpYWxvZz0iZGlhbG9nX2xpbmsiCiAgICAgICAgICAgICAgICAgIDptb2JpbGVtZWRpYT0ibW9iaWxlbWVkaWEiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvdi1kaWFsb2c+CgogICAgICAgICAgICAgIDwhLS1GT1JNVUxBUklPUyBQQVJBIENSSUHDh8ODTyBERSBJVEVOUyBERSBJTkZPUk1Bw4fDg08gLS0+CiAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBjcmlhw6fDo28gZGUgcHJvY2VkaW1lbnRvIC0tPgogICAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfcHJvY2VkdXJlIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjgwMHB4Ij4KICAgICAgICAgICAgICAgIDxQcm9jZWR1cmVEaWFsb2cKICAgICAgICAgICAgICAgICAgQGNsb3NlPSJkaWFsb2djbG9zZSIKICAgICAgICAgICAgICAgICAgOmRpYWxvZz0iZGlhbG9nX3Byb2NlZHVyZSIKICAgICAgICAgICAgICAgICAgOnByb2NlZHVyZT0icHJvY2VkaW1lbnRvIgogICAgICAgICAgICAgICAgICA6Y29uY2VwdD0iY29uY2VpdG8iCiAgICAgICAgICAgICAgICAgIDptb2R1bGU9Im1vZHVsbyIKICAgICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgPC92LWRpYWxvZz4KCiAgICAgICAgICAgICAgPCEtLUZPUk1VTEFSSU9TIFBBUkEgQ1JJQcOHw4NPIERFIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIC0tPgogICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgY3JpYcOnw6NvIGRlIGV4ZXJjw61jaW8gZSBhdmFsaWHDp8OjbyAtLT4KICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX2F2YWxpYWNhbyIgcGVyc2lzdGVudD0icGVyc2lzdGVudCIgbWF4LXdpZHRoPSIxMTAwcHgiPgogICAgICAgICAgICAgICAgPEF2YWxpYWNhb0RpYWxvZwogICAgICAgICAgICAgICAgICBAaW5zdHJ1Y2Nsb3NlPSJpbnN0cnVjZGlhbG9nY2xvc2UiCiAgICAgICAgICAgICAgICAgIDppbnN0cnVjT3B0aW9uQ2FsbD0iaW5zdHJ1Y09iamVjdEZpbGUiCiAgICAgICAgICAgICAgICAgIDppbnN0cnVjVHlwZT0iaW5zdHJ1Y1R5cGUiCiAgICAgICAgICAgICAgICAgIDppbnN0cnVjVmFsdWVUeXBlPSJpbnN0cnVjVmFsdWVUeXBlIgogICAgICAgICAgICAgICAgICA6ZG9tYWluPSJkb21pbmlvIgogICAgICAgICAgICAgICAgICA6ZGlhbG9nPSJkaWFsb2dfYXZhbGlhY2FvIgogICAgICAgICAgICAgICAgICA6aW5zdHJ1Y3Rpb25hbGVsZW1lbnQ9ImVsZW1lbnRvaW5zdHJ1Y2lvbmFsIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgY3JpYcOnw6NvIGRlIGF0aXZpZGFkZSBjb2xhYm9yYXRpdmEgLS0+CiAgICAgICAgICAgICAgPHYtZGlhbG9nCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJkaWFsb2dfYXRpdmlkYWRlY29sYWJvcmF0aXZhIgogICAgICAgICAgICAgICAgcGVyc2lzdGVudD0icGVyc2lzdGVudCIKICAgICAgICAgICAgICAgIG1heC13aWR0aD0iMTEwMHB4IgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxBdGl2aWRhZGVDb2xhYm9yYXRpdmFEaWFsb2cKICAgICAgICAgICAgICAgICAgQGluc3RydWNjbG9zZT0iaW5zdHJ1Y2RpYWxvZ2Nsb3NlIgogICAgICAgICAgICAgICAgICA6aW5zdHJ1Y09wdGlvbkNhbGw9Imluc3RydWNPYmplY3RGaWxlIgogICAgICAgICAgICAgICAgICA6aW5zdHJ1Y1R5cGU9Imluc3RydWNUeXBlIgogICAgICAgICAgICAgICAgICA6ZG9tYWluPSJkb21pbmlvIgogICAgICAgICAgICAgICAgICA6ZGlhbG9nPSJkaWFsb2dfYXRpdmlkYWRlY29sYWJvcmF0aXZhIgogICAgICAgICAgICAgICAgICA6aW5zdHJ1Y3Rpb25hbGVsZW1lbnQ9ImVsZW1lbnRvaW5zdHJ1Y2lvbmFsIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgZWRpw6fDo28gZG8gbW9kZWxvIGRpZMOhdGljbyAtLT4KICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX3Zpc2libGUiIHBlcnNpc3RlbnQ9InBlcnNpc3RlbnQiIG1heC13aWR0aD0iMTAwMHB4Ij4KICAgICAgICAgICAgICAgIDxWaXNpYmxlRGlhbG9nCiAgICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDpkaWFsb2c9ImRpYWxvZ192aXNpYmxlIgogICAgICAgICAgICAgICAgICBAb3BlbkRpZGF0aWNEaWFsb2c9Im9wZW5EaWRhdGljRGlhbG9nIgogICAgICAgICAgICAgICAgICBAY2xvc2Vfb3Jfc2F2ZT0idmlzaWJsZUNsb3NlIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgoKICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvcyBwYXLDom1ldHJvcyBkZSBhdmFsaWHDp8OjbyAtLT4KICAgICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX2Fzc2Vzc21lbnQiIHBlcnNpc3RlbnQ9InBlcnNpc3RlbnQiIG1heC13aWR0aD0iMTAwMHB4Ij4KICAgICAgICAgICAgICAgIDxBc3Nlc3NtZW50UGFyYW1ldGVyRGlhbG9nCiAgICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDpkaWFsb2c9ImRpYWxvZ19hc3Nlc3NtZW50IgogICAgICAgICAgICAgICAgICBAY2xvc2Vfb3Jfc2F2ZT0iYXNzZXNzbWVudENsb3NlIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgoKICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvcyBjb25oZWNpbWVudG9zIHByw6l2aW9zIC0tPgogICAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfcHJpb3IiIHBlcnNpc3RlbnQ9InBlcnNpc3RlbnQiIG1heC13aWR0aD0iMTAwMHB4Ij4KICAgICAgICAgICAgICAgIDxQcmlvcktub3dsZWRnZURpYWxvZwogICAgICAgICAgICAgICAgICA6ZG9tYWluPSJkb21pbmlvIgogICAgICAgICAgICAgICAgICA6ZGlhbG9nPSJkaWFsb2dfcHJpb3IiCiAgICAgICAgICAgICAgICAgIEBjbG9zZV9vcl9zYXZlPSJwcmlvckNsb3NlIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgoKICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvcyBjb25oZWNpbWVudG9zIHByw6l2aW9zIHBhcmEgbyBjb25jZWl0by0tPgogICAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfcHJpb3JDb25jZXB0IiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjEwMDBweCI+CiAgICAgICAgICAgICAgICA8UHJpb3JLbm93bGVkZ2VEaWFsb2dDb25jZXB0CiAgICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDptb2R1bGU9Im1vZHVsbyIKICAgICAgICAgICAgICAgICAgOmNvbmNlcHQ9ImNvbmNlaXRvIgogICAgICAgICAgICAgICAgICA6ZGlhbG9nPSJkaWFsb2dfcHJpb3JDb25jZXB0IgogICAgICAgICAgICAgICAgICBAY2xvc2Vfb3Jfc2F2ZT0icHJpb3JDbG9zZUNvbmNlcHQiCiAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgIDwvdi1kaWFsb2c+CgogICAgICAgICAgICAgIDwhLS1Gb3JtdWzDoXJpbyBwYXJhIGNyaWHDp8OjbyBkZSBleGVtcGxvLS0+CiAgICAgICAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZ19leGVtcGxvIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjExMDBweCI+CiAgICAgICAgICAgICAgICA8RXhlbXBsb0RpYWxvZwogICAgICAgICAgICAgICAgICBAaW5zdHJ1Y2Nsb3NlPSJpbnN0cnVjZGlhbG9nY2xvc2UiCiAgICAgICAgICAgICAgICAgIDppbnN0cnVjT3B0aW9uQ2FsbD0iaW5zdHJ1Y09iamVjdEZpbGUiCiAgICAgICAgICAgICAgICAgIDppbnN0cnVjVHlwZT0iaW5zdHJ1Y1R5cGUiCiAgICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICAgIDpkaWFsb2c9ImRpYWxvZ19leGVtcGxvIgogICAgICAgICAgICAgICAgICA6aW5zdHJ1Y3Rpb25hbGVsZW1lbnQ9ImVsZW1lbnRvaW5zdHJ1Y2lvbmFsIgogICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgPC92LXJvdz4KICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CiAgICAgIDwhLS1GSU0gRE8gSEVBREVSIERPIERPTcONTklPLS0+CiAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50IGNvbG9yPSIjRUZFRUVDIj4KICAgICAgICA8IS0tQ09OVEVOVCBETyBET03DjU5JTy0tPgogICAgICAgIDwhLS0gUEFORUxTIERPUyBBUlFVSVZPUy9NT0JJTEVNRURJQVMgRE8gRE9Nw41OSU8tLT4KICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICB2LW1vZGVsPSJ2TW9kZWxQYW5lbE1vYmlsZW1lZGlhc0RvbWFpbiIKICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICA6cmVhZG9ubHk9InJlYWRvbmx5X2NvbnRyb2wiCiAgICAgICAgPgogICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsCiAgICAgICAgICAgIHYtZm9yPSIobW9iaWxlbWVkaWEsIGltb2JpbGVtZWRpYSkgaW4gZG9taW5pby5tb2JpbGVtZWRpYXMiCiAgICAgICAgICAgIDprZXk9Imltb2JpbGVtZWRpYSIKICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgOmlkPSJtb2JpbGVtZWRpYS51cmwuc3BsaXQoJy8nKVszXSArIG1vYmlsZW1lZGlhLmlkbW9iaWxlbWVkaWEiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgY29sb3I9IiNBNUE1QTUiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyI+CiAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIiBzdHlsZT0iaGVpZ2h0OjEwMCU7Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlOyIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0id2hpdGUiIGxhcmdlPgogICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZXNJY29uWwogICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVtZWRpYS5ma19pZG1lZGlhdHlwZS5zcGxpdCgiLyIpWzRdIC0gMQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVtZWRpYVR5cGVMYWJlbFsKICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KAogICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWEuZmtfaWRtZWRpYXR5cGUuc3BsaXQoIi8iKVs0XSAtIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNCIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIganVzdGlmeS1lbmQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1lbmQgbXItMSBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgZWRpw6fDo28gZG8gYXJxdWl2by9tb2JpbGVtZWRpYS0tPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBzZXRtb2JpbGVtZWRpYShtb2JpbGVtZWRpYSwgZG9taW5pbywgJ2RvbWluaW8nKTsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wZW5jaWw8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgYXJxdWl2by9tb2JpbGVtZWRpYS0tPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBhdXhFbGVtZW50RGVsZXRlID0gbW9iaWxlbWVkaWE7CiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0RGVsZXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CgogICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJtb2JpbGVtZWRpYS51cmxsaW5rIj57eyBtb2JpbGVtZWRpYS51cmxsaW5rIH19PC9zcGFuPgogICAgICAgICAgICAgIDxzcGFuIHYtaWY9Im1vYmlsZW1lZGlhLnRleHRmdWxsIiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZS1saW5lIj4KICAgICAgICAgICAgICAgIDxzdHJvbmc+VGV4dG8gY29tcGxldG86PC9zdHJvbmc+CiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgIHt7IG1vYmlsZW1lZGlhLnRleHRmdWxsIH19CiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgICAgICAgIDxzcGFuIHYtaWY9Im1vYmlsZW1lZGlhLnRleHRzaG9ydCIgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmUtbGluZSI+CiAgICAgICAgICAgICAgICA8c3Ryb25nPlRleHRvIHJlc3VtaWRvOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICB7eyBtb2JpbGVtZWRpYS50ZXh0c2hvcnQgfX0KICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbHM+CiAgICAgICAgPCEtLSBGSU0gRE9TIFBBTkVMUyBET1MgQVJRVUlWT1MgRE8gRE9Nw41OSU8tLT4KICAgICAgICA8IS0tTElTVEFHRU0gRE9TIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIERPIERPTcONTklPLS0+CiAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVscwogICAgICAgICAgdi1tb2RlbD0idk1vZGVsUGFuZWxJbnN0cnVjc0RvbWFpbiIKICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICA6cmVhZG9ubHk9InJlYWRvbmx5X2NvbnRyb2wiCiAgICAgICAgPgogICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsCiAgICAgICAgICAgIHYtZm9yPSIoaW5zdHJ1Y2VsZW1lbnQsCiAgICAgICAgICAgIGlpbnN0cnVjZWxlbWVudCkgaW4gZG9taW5pby5pbnN0cnVjdGlvbmFsZWxlbWVudHMiCiAgICAgICAgICAgIDprZXk9ImlpbnN0cnVjZWxlbWVudCIKICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgOmlkPSIKICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudC51cmwuc3BsaXQoJy8nKVszXSArCiAgICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudC5pZGluc3RydWN0aW9uYWxlbGVtZW50CiAgICAgICAgICAgICIKICAgICAgICAgID4KICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciBjb2xvcj0iI0E1QTVBNSIgc3R5bGU9ImNvbG9yOndoaXRlOyBoZWlnaHQ6IDU1cHg7Ij4KICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiIHN0eWxlPSJoZWlnaHQ6MTAwJTsiPgogICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7IiBjbGFzcz0ibXQtMyI+CiAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGNvbG9yPSJ3aGl0ZSIgbGFyZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNUeXBlc0ljb25bCiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LmZrX2luc3RydWN0aW9uYWxlbGVtZW50dHlwZS5zcGxpdCgKICAgICAgICAgICAgICAgICAgICAgICAgIi8iCiAgICAgICAgICAgICAgICAgICAgICAgIClbNF0gLSAxCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgIDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj0iaW5zdHJ1Y2VsZW1lbnQubGFiZWwubGVuZ3RoIDw9IDQwIj57eyBpbnN0cnVjZWxlbWVudC5sYWJlbCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZT57eyBpbnN0cnVjZWxlbWVudC5sYWJlbC5zbGljZSgwLCA0MCkgfX0uLi48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNCIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIganVzdGlmeS1lbmQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1lbmQgbXItMSBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgZWRpw6fDo28gZG9zIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIGRvIERPTcONTklPLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldGluc3RydWN0aW9uYWxlbGVtZW50KAogICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWluaW8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvbWluaW8nCiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGVuY2lsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIGRvIERPTcONTklPLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGF1eEVsZW1lbnREZWxldGUgPSBpbnN0cnVjZWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnREZWxldGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRlbGV0ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KCiAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50Pjwvdi1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbHM+CiAgICAgICAgPCEtLSBGSU0gREEgTElTVEFHRU0gRE9TIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIERPIERPTcONTklPLS0+CiAgICAgICAgPCEtLVBhbmVscyBkb3MgTcOzZHVsb3MtLT4KICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzIHYtbW9kZWw9InZNb2RlbFBhbmVsTW9kdWxlcyIgbXVsdGlwbGUgOnJlYWRvbmx5PSJyZWFkb25seV9jb250cm9sIj4KICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbAogICAgICAgICAgICB2LWZvcj0iKG1vZHVsbywgaW1vZHVsbykgaW4gZ2V0Tm90U3VibW9kdWxlcyhkb21pbmlvKSIKICAgICAgICAgICAgOmtleT0iaW1vZHVsbyIKICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgOmlkPSJtb2R1bG8udXJsLnNwbGl0KCcvJylbM10gKyBtb2R1bG8uaWRtb2R1bGUiCiAgICAgICAgICA+CiAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgY29sb3I9IiM2NjY2NDQiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyI+CiAgICAgICAgICAgICAgPCEtLUhFQURFUiBETyBNw5NEVUxPLS0+CiAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIiBzdHlsZT0iaGVpZ2h0OjEwMCU7Ij4KICAgICAgICAgICAgICAgICAgPHYtYXZhdGFyIGNvbG9yPSJ3aGl0ZSIgc2l6ZT0iNDAiIGNsYXNzPSJtci0yIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmxhY2stLXRleHQiIHN0eWxlPSJmb250LXNpemU6MS4yZW07Ij5NRDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC92LWF2YXRhcj4KICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlOyIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZwogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJtb2R1bG8ubmFtZW1vZHVsZS5sZW5ndGggPD0gNDAiCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6MS4yZW07IgogICAgICAgICAgICAgICAgICAgICAgPnt7IG1vZHVsby5uYW1lbW9kdWxlIH19PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nCiAgICAgICAgICAgICAgICAgICAgICAgIHYtZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOjEuMmVtOyIKICAgICAgICAgICAgICAgICAgICAgID57eyBtb2R1bG8ubmFtZW1vZHVsZS5zbGljZSgwLCA0MCkgfX0uLi48L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImZvbnQtc2l6ZTowLjllbTsiCiAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Im1vZHVsby5zdWJ0aXRsZSAmJiBtb2R1bG8uc3VidGl0bGUubGVuZ3RoIDw9IDQwIgogICAgICAgICAgICAgICAgICAgICAgPnt7IG1vZHVsby5zdWJ0aXRsZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6MC45ZW07IgogICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJtb2R1bG8uc3VidGl0bGUgJiYgbW9kdWxvLnN1YnRpdGxlLmxlbmd0aCA+IDQwIgogICAgICAgICAgICAgICAgICAgICAgPnt7IG1vZHVsby5zdWJ0aXRsZS5zbGljZSgwLCA0MCkgfX0uLi48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNCIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIganVzdGlmeS1lbmQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1lbmQgbXItMSBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgIDwhLS1NZW51IHBhcmEgY3JpYcOnw6NvIGRlIGVsZW1lbnRvcyBpbnN0cnVjaW9uYWlzIGRvIE3Ds2R1bG8tLT4KICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS10ZXh0LWJveC1wbHVzLW91dGxpbmU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgPEluc3RydWNNZW51RmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgQGluc3RydWNkaWFsb2dvcHRpb249Imluc3RydWNPcGVuRmlsZURpYWxvZyIKICAgICAgICAgICAgICAgICAgICAgICAgOmluc3RydWNPcHRpb25DYWxsPSJtb2R1bG8iCiAgICAgICAgICAgICAgICAgICAgICAgIDppbnN0cnVjVHlwZT0iJ21vZHVsbyciCiAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgoKICAgICAgICAgICAgICAgICAgICA8IS0tIE1lbnUgcGFyYSBjcmlhw6fDo28gZGUgYXJxdWl2b3MtLT4KICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1hcHBzPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgIDxNZW51RmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgQGRpYWxvZ29wdGlvbj0ib3BlbkZpbGVEaWFsb2ciCiAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJtb2R1bG8iCiAgICAgICAgICAgICAgICAgICAgICAgIDp0eXBlPSInbW9kdWxvJyIKICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgPC92LW1lbnU+CiAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBhZGnDp8OjbyBkZSBzdWJtw7NkdWxvIG91IGNvbmNlaXRvcy0tPgogICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgIHRvcD0idG9wIgogICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwMHB4IgogICAgICAgICAgICAgICAgICAgICAgb3JpZ2luPSJjZW50ZXIgY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgOm9mZnNldC15PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgZGFyaz0iZGFyayIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXBsdXM8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldG1vZHVsbyhtb2R1bG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nX2NvbmNlaXRvID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGU+Q29uY2VpdG88L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0bW9kdWxvKG1vZHVsbyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dfc3VibW9kdWxvID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGU+U3VibcOzZHVsbzwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvIG1vZHVsby0tPgogICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dfbW9kdWxvID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0bW9kdWxvKG1vZHVsbyk7CiAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGVuY2lsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIG3Ds2R1bG8tLT4KICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgIGljb249Imljb24iCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seV9jb250cm9sID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgYXV4RWxlbWVudERlbGV0ZSA9IG1vZHVsbzsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnREZWxldGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRlbGV0ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KICAgICAgICAgICAgPCEtLUZJTSBETyBIRUFERVIgRE8gTcOTRFVMTy0tPgoKICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgPCEtLUNPTlRFTlQgRE8gTcOTRFVMTy0tPgogICAgICAgICAgICAgIDwhLS0gUEFORUxTIERPUyBBUlFVSVZPUyBET1MgTcOTRFVMT1MtLT4KICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2TW9kZWxQYW5lbE1vYmlsZW1lZGlhc01vZHVsZSIKICAgICAgICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICAgICAgICA6cmVhZG9ubHk9InJlYWRvbmx5X2NvbnRyb2wiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsCiAgICAgICAgICAgICAgICAgIHYtZm9yPSIobW9iaWxlbWVkaWEsIGltb2JpbGVtZWRpYSkgaW4gbW9kdWxvLm1vYmlsZW1lZGlhcyIKICAgICAgICAgICAgICAgICAgOmtleT0iaW1vYmlsZW1lZGlhIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi0yIgogICAgICAgICAgICAgICAgICA6aWQ9IgogICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLnVybC5zcGxpdCgnLycpWzNdICsgbW9iaWxlbWVkaWEuaWRtb2JpbGVtZWRpYQogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgY29sb3I9IiNBNUE1QTUiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyI+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIiBzdHlsZT0iaGVpZ2h0OjEwMCU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlOyIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0id2hpdGUiIGxhcmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZXNJY29uWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVtZWRpYS5ma19pZG1lZGlhdHlwZS5zcGxpdCgiLyIpWzRdIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVtZWRpYVR5cGVMYWJlbFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWEuZmtfaWRtZWRpYXR5cGUuc3BsaXQoIi8iKVs0XSAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNCIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIganVzdGlmeS1lbmQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1lbmQgbXItMSBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgZWRpw6fDo28gZG8gYXJxdWl2by9tb2JpbGVtZWRpYS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRtb2JpbGVtZWRpYShtb2JpbGVtZWRpYSwgZG9taW5pbywgJ2RvbWluaW8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wZW5jaWw8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgYXJxdWl2by9tb2JpbGVtZWRpYS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXhFbGVtZW50RGVsZXRlID0gbW9iaWxlbWVkaWE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0RGVsZXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CgogICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJtb2JpbGVtZWRpYS51cmxsaW5rIj57eyBtb2JpbGVtZWRpYS51cmxsaW5rIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9Im1vYmlsZW1lZGlhLnRleHRmdWxsIiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZS1saW5lIj4KICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+VGV4dG8gY29tcGxldG86PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgIHt7IG1vYmlsZW1lZGlhLnRleHRmdWxsIH19CiAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9Im1vYmlsZW1lZGlhLnRleHRzaG9ydCIgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmUtbGluZSI+CiAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlRleHRvIHJlc3VtaWRvOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICB7eyBtb2JpbGVtZWRpYS50ZXh0c2hvcnQgfX0KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbHM+CiAgICAgICAgICAgICAgPCEtLSBGSU0gRE9TIFBBTkVMUyBET1MgQVJRVUlWT1MgRE9TIE3Dk0RVTE9TLS0+CiAgICAgICAgICAgICAgPCEtLUxJU1RBR0VNIERPUyBFTEVNRU5UT1MgSU5TVFJVQ0lPTkFJUyBET1MgTcOTRFVMT1MtLT4KICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2TW9kZWxQYW5lbEluc3RydWNzTW9kdWxlIgogICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgIDpyZWFkb25seT0icmVhZG9ubHlfY29udHJvbCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwKICAgICAgICAgICAgICAgICAgdi1mb3I9IihpbnN0cnVjZWxlbWVudCwKICAgICAgICAgICAgICAgICAgaWluc3RydWNlbGVtZW50KSBpbiBtb2R1bG8uaW5zdHJ1Y3Rpb25hbGVsZW1lbnRzIgogICAgICAgICAgICAgICAgICA6a2V5PSJpaW5zdHJ1Y2VsZW1lbnQiCiAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIG1iLTIiCiAgICAgICAgICAgICAgICAgIDppZD0iCiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y2VsZW1lbnQudXJsLnNwbGl0KCcvJylbM10gKwogICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y2VsZW1lbnQuaWRpbnN0cnVjdGlvbmFsZWxlbWVudAogICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgY29sb3I9IiNBNUE1QTUiIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyI+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIiBzdHlsZT0iaGVpZ2h0OjEwMCU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlOyIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0id2hpdGUiIGxhcmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjVHlwZXNJY29uWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudC5ma19pbnN0cnVjdGlvbmFsZWxlbWVudHR5cGUuc3BsaXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApWzRdIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Imluc3RydWNlbGVtZW50LmxhYmVsLmxlbmd0aCA8PSA0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID57eyBpbnN0cnVjZWxlbWVudC5sYWJlbCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZT57eyBpbnN0cnVjZWxlbWVudC5sYWJlbC5zbGljZSgwLCA0MCkgfX0uLi48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNCIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIganVzdGlmeS1lbmQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1lbmQgbXItMSBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgZWRpw6fDo28gZG9zIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIGRvIERPTcONTklPLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldGluc3RydWN0aW9uYWxlbGVtZW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWluaW8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvbWluaW8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGVuY2lsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIGRvIERPTcONTklPLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1eEVsZW1lbnREZWxldGUgPSBpbnN0cnVjZWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnREZWxldGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRlbGV0ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KCiAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50Pjwvdi1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbHM+CiAgICAgICAgICAgICAgPCEtLSBGSU0gREEgTElTVEFHRU0gRE9TIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIERPUyBNw5NEVUxPUy0tPgogICAgICAgICAgICAgIDwhLS1QYW5lbHMgZG9zIFN1Yk3Ds2R1bG9zLS0+CiAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVscwogICAgICAgICAgICAgICAgdi1tb2RlbD0idk1vZGVsUGFuZWxTdWJtb2R1bGVzIgogICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgIDpyZWFkb25seT0icmVhZG9ubHlfY29udHJvbCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwKICAgICAgICAgICAgICAgICAgdi1mb3I9IihzdWJtb2R1bG8sIGlzdWJtb2R1bG8pIGluIG1vZHVsby5zdWJtb2R1bGVzIgogICAgICAgICAgICAgICAgICA6a2V5PSJpc3VibW9kdWxvIgogICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi0yIgogICAgICAgICAgICAgICAgICA6aWQ9InN1Ym1vZHVsby51cmwuc3BsaXQoJy8nKVszXSArIHN1Ym1vZHVsby5pZG1vZHVsZSIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciBjb2xvcj0iIzcxQ0I5NyIgc3R5bGU9ImNvbG9yOndoaXRlOyBoZWlnaHQ6IDU1cHg7Ij4KICAgICAgICAgICAgICAgICAgICA8IS0tSEVBREVSIERPIFNVQk3Dk0RVTE8tLT4KICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiIHN0eWxlPSJoZWlnaHQ6MTAwJTsiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1hdmF0YXIgY29sb3I9IndoaXRlIiBzaXplPSIzOCIgY2xhc3M9Im1yLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJibGFjay0tdGV4dCIgc3R5bGU9ImZvbnQtc2l6ZToxLjJlbTsiPlNNPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7IiBjbGFzcz0ibXQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9InN1Ym1vZHVsby5uYW1lbW9kdWxlIDw9IDQwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOjEuMmVtOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID57eyBzdWJtb2R1bG8ubmFtZW1vZHVsZSB9fTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyB2LWVsc2Ugc3R5bGU9ImZvbnQtc2l6ZToxLjJlbTsiPnt7IHN1Ym1vZHVsby5uYW1lbW9kdWxlIH19PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6MC45ZW07IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtb2R1bG8uc3VidGl0bGUgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1vZHVsby5zdWJ0aXRsZS5sZW5ndGggPD0gNDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPnt7IHN1Ym1vZHVsby5zdWJ0aXRsZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6MC45ZW07IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtb2R1bG8uc3VidGl0bGUgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1vZHVsby5zdWJ0aXRsZS5sZW5ndGggPiA0MAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+e3sgc3VibW9kdWxvLnN1YnRpdGxlIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjQiIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIGp1c3RpZnktZW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktZW5kIG1yLTEgYWxpZ24tY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tTWVudSBwYXJhIGNyaWHDp8OjbyBkZSBlbGVtZW50b3MgaW5zdHJ1Y2lvbmFpcyBkbyBTdWJNw7NkdWxvLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wPSJ0b3AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMzAwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW49ImNlbnRlciBjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b2Zmc2V0LXk9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gaWNvbj0iaWNvbiIgY29sb3I9IndoaXRlIiBkYXJrPSJkYXJrIiB2LW9uPSJvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktdGV4dC1ib3gtcGx1cy1vdXRsaW5lPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnN0cnVjTWVudUZpbGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpbnN0cnVjZGlhbG9nb3B0aW9uPSJpbnN0cnVjT3BlbkZpbGVEaWFsb2ciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppbnN0cnVjT3B0aW9uQ2FsbD0ic3VibW9kdWxvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aW5zdHJ1Y1R5cGU9Iidtb2R1bG8nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIE1lbnUgcGFyYSBjcmlhw6fDo28gZGUgYXJxdWl2b3MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1hcHBzPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51RmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGRpYWxvZ29wdGlvbj0ib3BlbkZpbGVEaWFsb2ciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJzdWJtb2R1bG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0eXBlPSInbW9kdWxvJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LW1lbnU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBhZGnDp8OjbyBkZSBjb25jZWl0by0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldG1vZHVsbyhzdWJtb2R1bG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dfY29uY2VpdG8gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXBsdXM8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvIHN1Ym1vZHVsby0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRzdWJtb2R1bG8oc3VibW9kdWxvKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nX3N1Ym1vZHVsbyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGVuY2lsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIHN1Ym3Ds2R1bG8tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249Imljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seV9jb250cm9sID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV4RWxlbWVudERlbGV0ZSA9IHN1Ym1vZHVsbzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnREZWxldGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRlbGV0ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KICAgICAgICAgICAgICAgICAgPCEtLUZJTSBETyBIRUFERVIgRE8gU1VCTcOTRFVMTy0tPgoKICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgPCEtLUNPTlRFTlQgRE8gU1VCTU9EVUxPLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLUxJU1RBR0VNIERPUyBBUlFVSVZPUyBET1MgU1VCTcOTVUxPUy0tPgogICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbHMKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZNb2RlbFBhbmVsTW9iaWxlbWVkaWFzU3VibW9kdWxlIgogICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0icmVhZG9ubHlfY29udHJvbCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwKICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iihtb2JpbGVtZWRpYSwKICAgICAgICAgICAgICAgICAgICAgICAgaW1vYmlsZW1lZGlhKSBpbiBzdWJtb2R1bG8ubW9iaWxlbWVkaWFzIgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbW9iaWxlbWVkaWEiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIG1iLTIiCiAgICAgICAgICAgICAgICAgICAgICAgIDppZD0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWEudXJsLnNwbGl0KCcvJylbM10gKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWEuaWRtb2JpbGVtZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iI0E1QTVBNSIKICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6d2hpdGU7IGhlaWdodDogNTVweDsiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiIHN0eWxlPSJoZWlnaHQ6MTAwJTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7IiBjbGFzcz0ibXQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGNvbG9yPSJ3aGl0ZSIgbGFyZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVUeXBlc0ljb25bCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlLnNwbGl0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVs0XSAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWFUeXBlTGFiZWxbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlLnNwbGl0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApWzRdIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI0IiBjbGFzcz0iZC1mbGV4IGFsaWduLWNlbnRlciBqdXN0aWZ5LWVuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWVuZCBtci0xIGFsaWduLWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBhcnF1aXZvL21vYmlsZW1lZGlhLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldG1vYmlsZW1lZGlhKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWluaW8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvbWluaW8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGVuY2lsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIGFycXVpdm8vbW9iaWxlbWVkaWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249Imljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seV9jb250cm9sID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV4RWxlbWVudERlbGV0ZSA9IG1vYmlsZW1lZGlhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydERlbGV0ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZGVsZXRlPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj0ibW9iaWxlbWVkaWEudXJsbGluayI+e3sgbW9iaWxlbWVkaWEudXJsbGluayB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJtb2JpbGVtZWRpYS50ZXh0ZnVsbCIgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmUtbGluZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlRleHRvIGNvbXBsZXRvOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBtb2JpbGVtZWRpYS50ZXh0ZnVsbCB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJtb2JpbGVtZWRpYS50ZXh0c2hvcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlLWxpbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5UZXh0byByZXN1bWlkbzo8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgbW9iaWxlbWVkaWEudGV4dHNob3J0IH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsPgogICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWxzPgogICAgICAgICAgICAgICAgICAgIDwhLS1GSU0gREEgTElTVEFHRU0gRE9TIEFSUVVJVk9TIERPUyBTVUJNw5NVTE9TLS0+CiAgICAgICAgICAgICAgICAgICAgPCEtLUxJU1RBR0VNIERPUyBFTEVNRU5UT1MgSU5TVFJVQ0lPTkFJUyBET1MgU1VCTcOTVUxPUy0tPgogICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbHMKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZNb2RlbFBhbmVsSW5zdHJ1Y3NTdWJtb2R1bGUiCiAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZQogICAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJyZWFkb25seV9jb250cm9sIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbAogICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGluc3RydWNlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICBpaW5zdHJ1Y2VsZW1lbnQpIGluIHN1Ym1vZHVsby5pbnN0cnVjdGlvbmFsZWxlbWVudHMiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImlpbnN0cnVjZWxlbWVudCIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSIKICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudC51cmwuc3BsaXQoJy8nKVszXSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudC5pZGluc3RydWN0aW9uYWxlbGVtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSIjQTVBNUE1IgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IGFsaWduLWNlbnRlciIgc3R5bGU9ImhlaWdodDoxMDAlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InZlcnRpY2FsLWFsaWduOm1pZGRsZTsiIGNsYXNzPSJtdC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gY29sb3I9IndoaXRlIiBsYXJnZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y1R5cGVzSWNvblsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y2VsZW1lbnQuZmtfaW5zdHJ1Y3Rpb25hbGVsZW1lbnR0eXBlLnNwbGl0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVs0XSAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJpbnN0cnVjZWxlbWVudC5sYWJlbC5sZW5ndGggPD0gNDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+e3sgaW5zdHJ1Y2VsZW1lbnQubGFiZWwgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWVsc2U+e3sgaW5zdHJ1Y2VsZW1lbnQubGFiZWwuc2xpY2UoMCwgNDApIH19Li4uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjQiIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIGp1c3RpZnktZW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktZW5kIG1yLTEgYWxpZ24tY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvcyBFTEVNRU5UT1MgSU5TVFJVQ0lPTkFJUyBkbyBET03DjU5JTy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRpbnN0cnVjdGlvbmFsZWxlbWVudCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21pbmlvLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkb21pbmlvJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXBlbmNpbDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZ1bsOnw6NvIHBhcmEgZXhjbHVpciBFTEVNRU5UT1MgSU5TVFJVQ0lPTkFJUyBkbyBET03DjU5JTy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXhFbGVtZW50RGVsZXRlID0gaW5zdHJ1Y2VsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0RGVsZXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CgogICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtY29udGVudD48L3YtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsPgogICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWxzPgogICAgICAgICAgICAgICAgICAgIDwhLS0gRklNIERBIExJU1RBR0VNIERPUyBFTEVNRU5UT1MgSU5TVFJVQ0lPTkFJUyBET1MgU1VCTcOTVUxPUy0tPgogICAgICAgICAgICAgICAgICAgIDwhLS1QYW5lbHMgZG9zIGNvbmNlaXRvcyBhZGljaW9uYWRvcyBkZW50cm8gZGUgc3VibcOzZHVsb3MtLT4KICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2TW9kZWxQYW5lbENvbmNlcHRzU3VibW9kdWxlIgogICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0icmVhZG9ubHlfY29udHJvbCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwKICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iihjb25jZWl0bywKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbmNlaXRvc3VibW9kdWxvKSBpbiBzdWJtb2R1bG8uY29uY2VwdHMiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9Imljb25jZWl0b3N1Ym1vZHVsbyIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSJjb25jZWl0by51cmwuc3BsaXQoJy8nKVszXSArIGNvbmNlaXRvLmlkY29uY2VwdCIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSIjM0I4M0ZGIgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1IRUFERVIgRE9TIENPTkNFSVRPUyBET1MgU1VCTcOTRFVMT1MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiIHN0eWxlPSJ3aWR0aDogMTAwJTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1hdmF0YXIgY29sb3I9IndoaXRlIiBzaXplPSIzOCIgY2xhc3M9Im1yLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJibGFjay0tdGV4dCIgc3R5bGU9ImZvbnQtc2l6ZToxLjJlbTsiPkNDPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYXZhdGFyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJjb25jZWl0by5uYW1lY29uY2VwdC5sZW5ndGggPD0gNDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJmb250LXNpemU6MS4yZW07IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPnt7IGNvbmNlaXRvLm5hbWVjb25jZXB0IH19PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWVsc2Ugc3R5bGU9ImZvbnQtc2l6ZToxLjJlbTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2VpdG8ubmFtZWNvbmNlcHQuc2xpY2UoMCwgNDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+Li4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNCIgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWVuZCBtci0xIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLU1lbnUgcGFyYSBjcmlhw6fDo28gZGUgZWxlbWVudG9zIGluc3RydWNpb25haXMgZG9zIGNvbmNlaXRvcyBhZGljaW9uYWRvcyBkZW50cm8gZGUgc3VibcOzZHVsb3MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS10ZXh0LWJveC1wbHVzLW91dGxpbmU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEluc3RydWNNZW51RmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGluc3RydWNkaWFsb2dvcHRpb249IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNPcGVuRmlsZURpYWxvZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppbnN0cnVjT3B0aW9uQ2FsbD0iY29uY2VpdG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppbnN0cnVjVHlwZT0iJ2NvbmNlaXRvJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LW1lbnU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gTWVudSBwYXJhIGNyaWHDp8OjbyBkZSBhcnF1aXZvcyBkb3MgY29uY2VpdG9zIGFkaWNpb25hZG9zIGRlbnRybyBkZSBzdWJtw7NkdWxvcy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcD0idG9wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwMHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luPSJjZW50ZXIgY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9mZnNldC15PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgZGFyaz0iZGFyayIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWFwcHM8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVGaWxlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZGlhbG9nb3B0aW9uPSJvcGVuRmlsZURpYWxvZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbkNhbGw9ImNvbmNlaXRvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dHlwZT0iJ2NvbmNlaXRvJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LW1lbnU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBhZGnDp8OjbyBkZSBpdGVucyBkZSBpbmZvcm1hw6fDo28gZG9zIGNvbmNlaXRvcyBhZGljaW9uYWRvcyBkZW50cm8gZGUgc3VibcOzZHVsb3MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wbHVzPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldGNvbmNlaXRvKGNvbmNlaXRvLCBtb2R1bG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nX3Byb2NlZHVyZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlPlByb2NlZGltZW50bzwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvcyBjb25jZWl0b3MgYWRpY2lvbmFkb3MgZGVudHJvIGRlIHN1Ym3Ds2R1bG9zLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldGNvbmNlaXRvKGNvbmNlaXRvLCBzdWJtb2R1bG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dfY29uY2VpdG8gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXBlbmNpbDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZ1bsOnw6NvIHBhcmEgZXhjbHVpciBjb25jZWl0by0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXhFbGVtZW50RGVsZXRlID0gY29uY2VpdG87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0RGVsZXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GSU0gRE8gSEVBREVSIERPUyBDT05DRUlUT1MgRE9TIFNVQk3Dk0RVTE9TLS0+CgogICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tSU7DjUNJTyBETyBDT05URU5UIERPUyBDT05DRUlUT1MgRE9TIFNVQk3Dk0RVTE9TLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBMaXN0YWdlbSBkb3MgcmVsYWNpb25hbWVudG9zIGRvcyBjb25jZWl0b3MgYWRpY2lvbmFkb3MgZGVudHJvIGRlIHN1Ym3Ds2R1bG9zIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPSJjb25jZWl0by5zb3VyY2Vjb25jZXB0Lmxlbmd0aCA+IDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPlJlbGFjaW9uYW1lbnRvczo8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXNpbXBsZS10YWJsZSB2LWlmPSJjb25jZWl0by5zb3VyY2Vjb25jZXB0Lmxlbmd0aCA+IDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpkZWZhdWx0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPkNvbmNlaXRvIEFsdm88L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPk5vbWUgZGEgUmVsYcOnw6NvPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGV4dC1sZWZ0Ij5UaXBvIGRhIFJlbGHDp8OjbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciB2LWZvcj0icmVsYWNhbyBpbiBjb25jZWl0by5zb3VyY2Vjb25jZXB0IiA6a2V5PSJyZWxhY2FvLnVybCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmROYW1lVGFyZ2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtb2R1bG8uY29uY2VwdHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGFjYW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyByZWxhY2FvLm5hbWVyZWZlcmVuY2UgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5kVGlwb1JlbGF0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhY2FvLmZrX3JlZmVyZW5jZXR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytc2ltcGxlLXRhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gTGlzdGFnZW0gZG9zIGFycXVpdm9zIGRvcyBjb25jZWl0b3MgRE9TIFNVQk3Dk0RVTE9TLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idk1vZGVsUGFuZWxNb2JpbGVtZWRpYXNDb25jZXB0U3VibW9kdWxlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0icmVhZG9ubHlfY29udHJvbCIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iihtb2JpbGVtZWRpYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1vYmlsZW1lZGlhKSBpbiBtb2JpbGVNZWRpYXNJbmZvcm1hdGlvbkl0ZW0oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2VpdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaW1vYmlsZW1lZGlhIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLnVybC5zcGxpdCgnLycpWzNdICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLmlkbW9iaWxlbWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tTElTVEFHRU0gRE9TIEFSUVVJVk9TIERPUyBDT05DRUlUT1MgRE9TIFNVQk1PRFVMT1MgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0iI0E1QTVBNSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iY29sb3I6d2hpdGU7IGhlaWdodDogNTVweDsiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIiIHN0eWxlPSJoZWlnaHQ6MTAwJTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7IiBjbGFzcz0ibXQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIGNvbG9yPSJ3aGl0ZSIgbGFyZ2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVUeXBlc0ljb25bCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlLnNwbGl0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVs0XSAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWFUeXBlTGFiZWxbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlLnNwbGl0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApWzRdIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI0IiBjbGFzcz0iZC1mbGV4IGFsaWduLWNlbnRlciBqdXN0aWZ5LWVuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWVuZCBtci0xIGFsaWduLWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBhcnF1aXZvL21vYmlsZW1lZGlhLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldG1vYmlsZW1lZGlhKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZW1lZGlhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWluaW8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvbWluaW8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGVuY2lsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIGFycXVpdm8vbW9iaWxlbWVkaWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249Imljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seV9jb250cm9sID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV4RWxlbWVudERlbGV0ZSA9IG1vYmlsZW1lZGlhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydERlbGV0ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZGVsZXRlPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj0ibW9iaWxlbWVkaWEudXJsbGluayI+e3sgbW9iaWxlbWVkaWEudXJsbGluayB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJtb2JpbGVtZWRpYS50ZXh0ZnVsbCIgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmUtbGluZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlRleHRvIGNvbXBsZXRvOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBtb2JpbGVtZWRpYS50ZXh0ZnVsbCB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJtb2JpbGVtZWRpYS50ZXh0c2hvcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlLWxpbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5UZXh0byByZXN1bWlkbzo8L3N0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgbW9iaWxlbWVkaWEudGV4dHNob3J0IH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWxzPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GSU0gREEgTElTVEFHRU0gRE9TIEFSUVVJVk9TIERPUyBDT05DRUlUT1MgRE9TIFNVQk1PRFVMT1MgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUxJU1RBR0VNIERPUyBQUk9DRURVUkVTIERPUyBDT05DRUlUT1MgRE9TIFNVQk3Dk0RVTE9TLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idk1vZGVsUGFuZWxQcm9jZWR1cmVzQ29uY2VwdFN1Ym1vZHVsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9InJlYWRvbmx5X2NvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIocHJvY2VkdXJlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcHJvY2VkdXJlKSBpbiBwcm9jZWR1cmVzVW5kZXJDb25jZXB0KGNvbmNlaXRvKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaXByb2NlZHVyZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZWR1cmUudXJsLnNwbGl0KCcvJylbM10gKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VkdXJlLmlkaW5mb3JtYXRpb25pdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSIjQTVBNUE1IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtQcm9jZWRpbWVudG9dCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcHJvY2VkdXJlLm5hbWVpbmZvcm1hdGlvbml0ZW0gfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI0IiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktZW5kIG1yLTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvIHByb2NlZHVyZS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRwcm9jZWRpbWVudG8oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2NlZHVyZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uY2VpdG8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1vZHVsbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ19wcm9jZWR1cmUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXBlbmNpbDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIGFycXVpdm8vbW9iaWxlbWVkaWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV4RWxlbWVudERlbGV0ZSA9IHByb2NlZHVyZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0RGVsZXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1yb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIG1sLTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPnt7IHByb2NlZHVyZS5kZXNjcmlwdGlvbmluZm9ybWF0aW9uaXRlbSB9fTwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUxJU1RBR0VNIERBUyBGQVNFUyBET1MgUFJPQ0VEVVJFUyBET1MgQ09OQ0VJVE9TIERPUyBTVUJNw5NEVUxPUy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibXQtMiI+RmFzZXMgZG8gcHJvY2VkaW1lbnRvOjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtc2ltcGxlLXRhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpkZWZhdWx0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiIHN0eWxlPSJ3aWR0aDoxNjBweDsiPk9yZGVtIGRhIGZhc2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPkRlc2NyacOnw6NvPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iZmFzZSBpbiBwcm9jZWR1cmUucGhhc2Vwcm9jZWR1cmVzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iZmFzZS51cmwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGZhc2Uub3JkZXIgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGZhc2UuZGVzY3JpcHRpb24gfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1zaW1wbGUtdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZJTSBEQSBMSVNUQUdFTSBEQVMgRkFTRVMgRE9TIFBST0NFRFVSRVMgRE9TIENPTkNFSVRPUyBET1MgU1VCTcOTRFVMT1MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEZJTSBEQSBMSVNUQUdFTSBET1MgUFJPQ0VEVVJFUyBET1MgQ09OQ0VJVE9TIERPUyBTVUJNw5NEVUxPUyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tTElTVEFHRU0gRE9TIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIERPUyBDT05DRUlUT1MgRE9TIFNVQk3Dk0RVTE9TLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idk1vZGVsUGFuZWxJbnN0cnVjc0NvbmNlcHRTdWJtb2R1bGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJyZWFkb25seV9jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGluc3RydWNlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpaW5zdHJ1Y2VsZW1lbnQpIGluIGNvbmNlaXRvLmluc3RydWN0aW9uYWxlbGVtZW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaWluc3RydWNlbGVtZW50IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LnVybC5zcGxpdCgnLycpWzNdICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LmlkaW5zdHJ1Y3Rpb25hbGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtaGVhZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IiNBNUE1QTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOndoaXRlOyBoZWlnaHQ6IDU1cHg7IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIiBzdHlsZT0iaGVpZ2h0OjEwMCU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlOyIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0id2hpdGUiIGxhcmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjVHlwZXNJY29uWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudC5ma19pbnN0cnVjdGlvbmFsZWxlbWVudHR5cGUuc3BsaXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApWzRdIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LmxhYmVsLmxlbmd0aCA8PSA0MAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+e3sgaW5zdHJ1Y2VsZW1lbnQubGFiZWwgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWVsc2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LmxhYmVsLnNsaWNlKDAsIDQwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fS4uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjQiIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIGp1c3RpZnktZW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktZW5kIG1yLTEgYWxpZ24tY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvcyBFTEVNRU5UT1MgSU5TVFJVQ0lPTkFJUyBkbyBET03DjU5JTy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRpbnN0cnVjdGlvbmFsZWxlbWVudCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21pbmlvLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkb21pbmlvJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXBlbmNpbDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZ1bsOnw6NvIHBhcmEgZXhjbHVpciBFTEVNRU5UT1MgSU5TVFJVQ0lPTkFJUyBkbyBET03DjU5JTy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXhFbGVtZW50RGVsZXRlID0gaW5zdHJ1Y2VsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0RGVsZXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtY29udGVudD48L3YtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWxzPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRklNIERBIExJU1RBR0VNIERPUyBFTEVNRU5UT1MgSU5TVFJVQ0lPTkFJUyBET1MgQ09OQ0VJVE9TIERPUyBTVUJNw5NEVUxPUy0tPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GSU0gRE8gQ09OVEVOVCBET1MgQ09OQ0VJVE9TIERPUyBTVUJNw5NEVUxPUy0tPgogICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KCiAgICAgICAgICAgICAgICAgICAgPCEtLUZJTSBETyBDT05URU5UIFBBTkVMUyBET1MgU1VCTcOTRFVMT1MtLT4KICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KCiAgICAgICAgICAgICAgPCEtLSBQYW5lbHMgZG9zIENvbmNlaXRvcyBkb3MgTcOzZHVsb3MtLT4KICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2TW9kZWxQYW5lbENvbmNlcHRzTW9kdWxlIgogICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgIDpyZWFkb25seT0icmVhZG9ubHlfY29udHJvbCIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwKICAgICAgICAgICAgICAgICAgdi1mb3I9Iihjb25jZWl0bywgaWNvbmNlaXRvbW9kdWxvKSBpbiBtb2R1bG8uY29uY2VwdHMiCiAgICAgICAgICAgICAgICAgIDprZXk9Imljb25jZWl0b21vZHVsbyIKICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgICAgICAgOmlkPSJjb25jZWl0by51cmwuc3BsaXQoJy8nKVszXSArIGNvbmNlaXRvLmlkY29uY2VwdCIKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciBjb2xvcj0iIzNCODNGRiIgc3R5bGU9ImNvbG9yOndoaXRlOyBoZWlnaHQ6IDU1cHg7Ij4KICAgICAgICAgICAgICAgICAgICA8IS0tSEVBREVSIERPUyBDT05DRUlUT1MgRE9TIE3Dk0RVTE9TLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIiBzdHlsZT0id2lkdGg6IDEwMCU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYXZhdGFyIGNvbG9yPSJ3aGl0ZSIgc2l6ZT0iMzgiIGNsYXNzPSJtci0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmxhY2stLXRleHQiIHN0eWxlPSJmb250LXNpemU6MS4yZW07Ij5DQzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWF2YXRhcj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj0iY29uY2VpdG8ubmFtZWNvbmNlcHQubGVuZ3RoIDw9IDQwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOjEuMmVtOyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57eyBjb25jZWl0by5uYW1lY29uY2VwdCB9fTwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1lbHNlIHN0eWxlPSJmb250LXNpemU6MS4yZW07Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmNlaXRvLm5hbWVjb25jZXB0LnNsaWNlKDAsIDQwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPi4uLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjQiIGNsYXNzPSJkLWZsZXgganVzdGlmeS1lbmQgbXItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InZlcnRpY2FsLWFsaWduOm1pZGRsZTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1NZW51IHBhcmEgY3JpYcOnw6NvIGRlIGVsZW1lbnRvcyBpbnN0cnVjaW9uYWlzIGRvcyBjb25jZWl0b3MgYWRpY2lvbmFkb3MgZGVudHJvIGRlIHN1Ym3Ds2R1bG9zLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wPSJ0b3AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMzAwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW49ImNlbnRlciBjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b2Zmc2V0LXk9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gaWNvbj0iaWNvbiIgY29sb3I9IndoaXRlIiBkYXJrPSJkYXJrIiB2LW9uPSJvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktdGV4dC1ib3gtcGx1cy1vdXRsaW5lPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnN0cnVjTWVudUZpbGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpbnN0cnVjZGlhbG9nb3B0aW9uPSJpbnN0cnVjT3BlbkZpbGVEaWFsb2ciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppbnN0cnVjT3B0aW9uQ2FsbD0iY29uY2VpdG8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppbnN0cnVjVHlwZT0iJ2NvbmNlaXRvJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LW1lbnU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBNZW51IHBhcmEgY3JpYcOnw6NvIGRlIGFycXVpdm9zIGRvcyBjb25jZWl0b3MgZG9zIG1vZHVsb3MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1hcHBzPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51RmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGRpYWxvZ29wdGlvbj0ib3BlbkZpbGVEaWFsb2ciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJjb25jZWl0byIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnR5cGU9Iidjb25jZWl0byciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgYWRpw6fDo28gZGUgaXRlbnMgZGUgaW5mb3JtYcOnw6NvIGRvcyBjb25jZWl0b3MgZG9zIG1vZHVsb3MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wbHVzPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRjb25jZWl0byhjb25jZWl0bywgbW9kdWxvKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ19wcm9jZWR1cmUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZT5Qcm9jZWRpbWVudG88L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LW1lbnU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBjb25jZWl0by0tPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRjb25jZWl0byhjb25jZWl0bywgbW9kdWxvKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nX2NvbmNlaXRvID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wZW5jaWw8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgY29uY2VpdG8tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249Imljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seV9jb250cm9sID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV4RWxlbWVudERlbGV0ZSA9IGNvbmNlaXRvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydERlbGV0ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZGVsZXRlPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgogICAgICAgICAgICAgICAgICA8IS0tRklNIERPIEhFQURFUiBET1MgQ09OQ0VJVE9TIERPUyBNw5NEVUxPUy0tPgoKICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBMaXN0YWdlbSBkb3MgcmVsYWNpb25hbWVudG9zIGRvIGNvbmNlaXRvIGRvcyBtw7NkdWxvcyAtLT4KICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im10LTIiIHYtaWY9ImNvbmNlaXRvLnNvdXJjZWNvbmNlcHQubGVuZ3RoID4gMCI+UmVsYWNpb25hbWVudG9zOjwvaDM+CiAgICAgICAgICAgICAgICAgICAgPHYtc2ltcGxlLXRhYmxlIHYtaWY9ImNvbmNlaXRvLnNvdXJjZWNvbmNlcHQubGVuZ3RoID4gMCI+CiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCI+Q29uY2VpdG8gQWx2bzwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCI+Tm9tZSBkYSBSZWxhw6fDo288L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPlRpcG8gZGEgUmVsYcOnw6NvPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHYtZm9yPSJyZWxhY2FvIGluIGNvbmNlaXRvLnNvdXJjZWNvbmNlcHQiIDprZXk9InJlbGFjYW8udXJsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyBmaW5kTmFtZVRhcmdldChtb2R1bG8uY29uY2VwdHMsIHJlbGFjYW8pIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57eyByZWxhY2FvLm5hbWVyZWZlcmVuY2UgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGZpbmRUaXBvUmVsYXRpb24ocmVsYWNhby5ma19yZWZlcmVuY2V0eXBlKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPC92LXNpbXBsZS10YWJsZT4KCiAgICAgICAgICAgICAgICAgICAgPCEtLUxJU1RBR0VNIERPUyBBUlFVSVZPUyBET1MgQ09OQ0VJVE9TIERPUyBNw5NEVUxPUy0tPgogICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbHMKICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9InZNb2RlbFBhbmVsTW9iaWxlbWVkaWFzQ29uY2VwdE1vZHVsZSIKICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICA6cmVhZG9ubHk9InJlYWRvbmx5X2NvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsCiAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIobW9iaWxlbWVkaWEsCiAgICAgICAgICAgICAgICAgICAgICAgIGltb2JpbGVtZWRpYSkgaW4gbW9iaWxlTWVkaWFzSW5mb3JtYXRpb25JdGVtKAogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmNlaXRvCiAgICAgICAgICAgICAgICAgICAgICAgICkiCiAgICAgICAgICAgICAgICAgICAgICAgIDprZXk9Imltb2JpbGVtZWRpYSIKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgICAgICAgICAgICAgOmlkPSIKICAgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVtZWRpYS51cmwuc3BsaXQoJy8nKVszXSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVtZWRpYS5pZG1vYmlsZW1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSIjQTVBNUE1IgogICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJjb2xvcjp3aGl0ZTsgaGVpZ2h0OiA1NXB4OyIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjbGFzcz0iZC1mbGV4IGFsaWduLWNlbnRlciIgc3R5bGU9ImhlaWdodDoxMDAlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9InZlcnRpY2FsLWFsaWduOm1pZGRsZTsiIGNsYXNzPSJtdC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gY29sb3I9IndoaXRlIiBsYXJnZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVR5cGVzSWNvblsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWEuZmtfaWRtZWRpYXR5cGUuc3BsaXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApWzRdIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVtZWRpYVR5cGVMYWJlbFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWEuZmtfaWRtZWRpYXR5cGUuc3BsaXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClbNF0gLSAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjQiIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIGp1c3RpZnktZW5kIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktZW5kIG1yLTEgYWxpZ24tY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvIGFycXVpdm8vbW9iaWxlbWVkaWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249Imljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seV9jb250cm9sID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0bW9iaWxlbWVkaWEoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlbWVkaWEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9taW5pbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG9taW5pbycKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wZW5jaWw8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgYXJxdWl2by9tb2JpbGVtZWRpYS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5X2NvbnRyb2wgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXhFbGVtZW50RGVsZXRlID0gbW9iaWxlbWVkaWE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0RGVsZXRlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CgogICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPSJtb2JpbGVtZWRpYS51cmxsaW5rIj57eyBtb2JpbGVtZWRpYS51cmxsaW5rIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9Im1vYmlsZW1lZGlhLnRleHRmdWxsIiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZS1saW5lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+VGV4dG8gY29tcGxldG86PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IG1vYmlsZW1lZGlhLnRleHRmdWxsIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9Im1vYmlsZW1lZGlhLnRleHRzaG9ydCIgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmUtbGluZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlRleHRvIHJlc3VtaWRvOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBtb2JpbGVtZWRpYS50ZXh0c2hvcnQgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbHM+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBGSU0gREEgTElTVEFHRU0gRE9TIEFSUVVJVk9TIERPUyBDT05DRUlUT1MgRE9TIE3Dk0RVTE9TIC0tPgoKICAgICAgICAgICAgICAgICAgICA8IS0tTElTVEFHRU0gRE9TIFBST0NFRFVSRVMgRE9TIENPTkNFSVRPUyBET1MgTcOTRFVMT1MtLT4KICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJ2TW9kZWxQYW5lbFByb2NlZHVyZXNDb25jZXB0TW9kdWxlIgogICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgIDpyZWFkb25seT0icmVhZG9ubHlfY29udHJvbCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwKICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9Iihwcm9jZWR1cmUsCiAgICAgICAgICAgICAgICAgICAgICAgIGlwcm9jZWR1cmUpIGluIHByb2NlZHVyZXNVbmRlckNvbmNlcHQoY29uY2VpdG8pIgogICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJpcHJvY2VkdXJlIgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi0yIgogICAgICAgICAgICAgICAgICAgICAgICA6aWQ9IgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb2NlZHVyZS51cmwuc3BsaXQoJy8nKVszXSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZWR1cmUuaWRpbmZvcm1hdGlvbml0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtaGVhZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IiNBNUE1QTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOndoaXRlOyBoZWlnaHQ6IDU1cHg7IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibXQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1Byb2NlZGltZW50b10KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBwcm9jZWR1cmUubmFtZWluZm9ybWF0aW9uaXRlbSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjQiIGNsYXNzPSJkLWZsZXgganVzdGlmeS1lbmQgbXItMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgZWRpw6fDo28gZG8gcHJvY2VkdXJlLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249Imljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seV9jb250cm9sID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHByb2NlZGltZW50bygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VkdXJlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25jZWl0bywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nX3Byb2NlZHVyZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGVuY2lsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgYXJxdWl2by9tb2JpbGVtZWRpYS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXhFbGVtZW50RGVsZXRlID0gcHJvY2VkdXJlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnREZWxldGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRlbGV0ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdyBjbGFzcz0ibXQtMiBtbC0xIj57eyBwcm9jZWR1cmUuZGVzY3JpcHRpb25pbmZvcm1hdGlvbml0ZW0gfX08L3Ytcm93PgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tTElTVEFHRU0gREFTIEZBU0VTIERPUyBQUk9DRURVUkVTIERPUyBDT05DRUlUT1MgRE9TIE3Dk0RVTE9TLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtdC0yIj5GYXNlcyBkbyBwcm9jZWRpbWVudG86PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zaW1wbGUtdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCIgc3R5bGU9IndpZHRoOjE2MHB4OyI+T3JkZW0gZGEgZmFzZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCI+RGVzY3Jpw6fDo288L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgdi1mb3I9ImZhc2UgaW4gcHJvY2VkdXJlLnBoYXNlcHJvY2VkdXJlcyIgOmtleT0iZmFzZS51cmwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGZhc2Uub3JkZXIgfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGZhc2UuZGVzY3JpcHRpb24gfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1zaW1wbGUtdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZJTSBEQSBMSVNUQUdFTSBEQVMgRkFTRVMgRE9TIFBST0NFRFVSRVMgRE9TIENPTkNFSVRPUyBET1MgTcOTRFVMT1MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KICAgICAgICAgICAgICAgICAgICA8IS0tIEZJTSBEQSBMSVNUQUdFTSBET1MgUFJPQ0VEVVJFUyBET1MgQ09OQ0VJVE9TIERPUyBNw5NEVUxPUyAtLT4KICAgICAgICAgICAgICAgICAgICA8IS0tTElTVEFHRU0gRE9TIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIERPUyBDT05DRUlUT1MgRE9TIE3Dk0RVTE9TLS0+CiAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVscwogICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0idk1vZGVsUGFuZWxJbnN0cnVjc0NvbmNlcHRTdWJtb2R1bGUiCiAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZQogICAgICAgICAgICAgICAgICAgICAgOnJlYWRvbmx5PSJyZWFkb25seV9jb250cm9sIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbAogICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGluc3RydWNlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICBpaW5zdHJ1Y2VsZW1lbnQpIGluIGNvbmNlaXRvLmluc3RydWN0aW9uYWxlbGVtZW50cyIKICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0iaWluc3RydWNlbGVtZW50IgogICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi0yIgogICAgICAgICAgICAgICAgICAgICAgICA6aWQ9IgogICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LnVybC5zcGxpdCgnLycpWzNdICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LmlkaW5zdHJ1Y3Rpb25hbGVsZW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtaGVhZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IiNBNUE1QTUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImNvbG9yOndoaXRlOyBoZWlnaHQ6IDU1cHg7IgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNsYXNzPSJkLWZsZXggYWxpZ24tY2VudGVyIiBzdHlsZT0iaGVpZ2h0OjEwMCU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idmVydGljYWwtYWxpZ246bWlkZGxlOyIgY2xhc3M9Im10LTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBjb2xvcj0id2hpdGUiIGxhcmdlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjVHlwZXNJY29uWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjZWxlbWVudC5ma19pbnN0cnVjdGlvbmFsZWxlbWVudHR5cGUuc3BsaXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApWzRdIC0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtaWY9Imluc3RydWNlbGVtZW50LmxhYmVsLmxlbmd0aCA8PSA0MCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57eyBpbnN0cnVjZWxlbWVudC5sYWJlbCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZT57eyBpbnN0cnVjZWxlbWVudC5sYWJlbC5zbGljZSgwLCA0MCkgfX0uLi48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iNCIgY2xhc3M9ImQtZmxleCBhbGlnbi1jZW50ZXIganVzdGlmeS1lbmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1lbmQgbXItMSBhbGlnbi1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgZWRpw6fDo28gZG9zIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIGRvIERPTcONTklPLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldGluc3RydWN0aW9uYWxlbGVtZW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWNlbGVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWluaW8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvbWluaW8nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGVuY2lsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTIGRvIERPTcONTklPLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlfY29udHJvbCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1eEVsZW1lbnREZWxldGUgPSBpbnN0cnVjZWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnREZWxldGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRlbGV0ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50Pjwvdi1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbHM+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBGSU0gREEgTElTVEFHRU0gRE9TIEVMRU1FTlRPUyBJTlNUUlVDSU9OQUlTICBET1MgQ09OQ0VJVE9TIERPUyBNw5NEVUxPUy0tPgogICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsPgogICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWxzPgogICAgICAgICAgICAgIDwhLS0gRklNIERPUyBQQU5FTFMgRE9TIENPTkNFSVRPUyBET1MgTcOTRFVMT1MtLT4KICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICA8IS0tRklNIERPIENPTlRFTlQgRE8gTcOTRFVMTy0tPgogICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICA8IS0tRklNIERPIENPTlRFTlQgRE8gRE9Nw41OSU8tLT4KICAgIDwvdi1leHBhbnNpb24tcGFuZWw+CiAgPC92LWV4cGFuc2lvbi1wYW5lbHM+CiAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgPHYtZGlhbG9nIHYtbW9kZWw9ImFsZXJ0RGVsZXRlIiB3aWR0aD0iNTAwIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50Ij4KICAgICAgPHYtY2FyZD4KICAgICAgICA8di1jYXJkLXRpdGxlIGNsYXNzPSJoZWFkbGluZSByZWQiIHByaW1hcnktdGl0bGUgc3R5bGU9ImNvbG9yOndoaXRlOyI+QUxFUlRBITwvdi1jYXJkLXRpdGxlPgogICAgICAgIDx2LWNhcmQtdGV4dAogICAgICAgICAgY2xhc3M9Im10LTMiCiAgICAgICAgICBzdHlsZT0iZm9udC1zaXplOiAxLjNlbTsiCiAgICAgICAgPlRlbSBjZXJ0ZXphIHF1ZSBkZXNlamEgYXBhZ2FyIGVzc2UgZWxlbWVudG8/PC92LWNhcmQtdGV4dD4KICAgICAgICA8di1kaXZpZGVyPjwvdi1kaXZpZGVyPgogICAgICAgIDx2LWNhcmQtYWN0aW9ucz4KICAgICAgICAgIDx2LWJ0biBjb2xvcj0icHJpbWFyeSIgQGNsaWNrPSJkZWxldGVlbGVtZW50byhhdXhFbGVtZW50RGVsZXRlKSI+U2ltPC92LWJ0bj4KICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgIGNvbG9yPSJyZWQiCiAgICAgICAgICAgIGRhcmsKICAgICAgICAgICAgQGNsaWNrPSIKICAgICAgICAgICAgICBhdXhFbGVtZW50RGVsZXRlID0gJyc7CiAgICAgICAgICAgICAgYWxlcnREZWxldGUgPSBmYWxzZTsKICAgICAgICAgICAgIgogICAgICAgICAgPk7Do288L3YtYnRuPgogICAgICAgIDwvdi1jYXJkLWFjdGlvbnM+CiAgICAgIDwvdi1jYXJkPgogICAgPC92LWRpYWxvZz4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nTG9hZGluZyIgbWF4LXdpZHRoPSIyOTAiIHBlcnNpc3RlbnQ9InBlcnNpc3RlbnQiPgogICAgICA8di1jYXJkIGNvbG9yPSJwcmltYXJ5IiBkYXJrPgogICAgICAgIDx2LWNhcmQtdGV4dCBzdHlsZT0iY29sb3I6d2hpdGU7Ij4KICAgICAgICAgIDx2LXJvdyBjbGFzcz0icHQtMiBwYi0zIj4KICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC1zaXplOiAxLjNlbTsgY29sb3I6d2hpdGU7Ij57eyBkaWFsb2dMb2FkaW5nTWVzc2FnZSB9fTwvc3Bhbj4KICAgICAgICAgICAgPHYtc3BhY2VyPjwvdi1zcGFjZXI+CiAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgPHYtcm93PgogICAgICAgICAgICA8di1zcGFjZXI+PC92LXNwYWNlcj4KICAgICAgICAgICAgPHYtcHJvZ3Jlc3MtY2lyY3VsYXIgaW5kZXRlcm1pbmF0ZSBjb2xvcj0id2hpdGUiIGNsYXNzPSJtYi0wIj48L3YtcHJvZ3Jlc3MtY2lyY3VsYXI+CiAgICAgICAgICAgIDx2LXNwYWNlcj48L3Ytc3BhY2VyPgogICAgICAgICAgPC92LXJvdz4KICAgICAgICA8L3YtY2FyZC10ZXh0PgogICAgICA8L3YtY2FyZD4KICAgIDwvdi1kaWFsb2c+CiAgPC9kaXY+Cjwvdi1yb3c+Cg=="},null]}