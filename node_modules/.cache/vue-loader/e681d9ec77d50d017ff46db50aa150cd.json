{"remainingRequest":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\www\\EducomML\\EducomML_Front\\src\\components\\Panels.vue?vue&type=template&id=3a6ccd9f&","dependencies":[{"path":"C:\\www\\EducomML\\EducomML_Front\\src\\components\\Panels.vue","mtime":1591742057067},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\www\\EducomML\\EducomML_Front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LXJvdz4KICA8IS0tUGFuZWwgZG8gRG9tw61uaW8tLT4KICA8di1leHBhbnNpb24tcGFuZWxzPgogICAgPHYtZXhwYW5zaW9uLXBhbmVsIHYtZm9yPSIoaXRlbSxpKSBpbiAxIiA6a2V5PSJpIj4KICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciBjb2xvcj0icHVycGxlIiBzdHlsZT0iY29sb3I6d2hpdGU7Ij4KICAgICAgICA8di1yb3c+CiAgICAgICAgICA8di1jb2wgY29scz0iOSI+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgIFtEb21pbmlvXQogICAgICAgICAgICAgIHt7IGRvbWluaW9fZGF0YS5uYW1la25vd2xlZGdlZG9tYWluIH19CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8di1jb2wgY29scz0iMyI+CiAgICAgICAgICAgIDwhLS0gTWVudSBwYXJhIGNyaWHDp8OjbyBkZSBhcnF1aXZvcy0tPgogICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgdG9wPSJ0b3AiCiAgICAgICAgICAgICAgd2lkdGg9IjMwMHB4IgogICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICA6b2Zmc2V0LXk9InRydWUiCiAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgZGFyaz0iZGFyayIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kb3RzLWhvcml6b250YWw8L3YtaWNvbj4KICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KCiAgICAgICAgICAgICAgPE1lbnVGaWxlcyBAZGlhbG9nb3B0aW9uPSJvcGVuRmlsZURpYWxvZyIgOm9wdGlvbkNhbGw9ImRvbWluaW8iIDp0eXBlPSInZG9taW5pbyciIC8+CiAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGFkacOnw6NvIGRvIG3Ds2R1bG8tLT4KICAgICAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZ19tb2R1bG8iIHBlcnNpc3RlbnQ9InBlcnNpc3RlbnQiIG1heC13aWR0aD0iNjAwcHgiPgogICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wbHVzPC92LWljb24+CiAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgIDxNb2R1bG9EaWFsb2cKICAgICAgICAgICAgICAgIDptb2R1bGU9Im1vZHVsbyIKICAgICAgICAgICAgICAgIEBjbG9zZV9vcl9zYXZlPSJjbG9zZV9vcl9zYXZlX21vZHVsbyIKICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICA6ZGlhbG9nPSJkaWFsb2dfbW9kdWxvIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvdi1kaWFsb2c+CgogICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvIGRvbcOtbmlvLS0+CiAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfZG9taW5pbyIgcGVyc2lzdGVudD0icGVyc2lzdGVudCIgbWF4LXdpZHRoPSI2MDBweCI+CiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICA8di1idG4gaWNvbj0iaWNvbiIgY29sb3I9IndoaXRlIiB2LW9uPSJvbiI+CiAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLXZpZXctaGVhZGxpbmU8L3YtaWNvbj4KICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGNyaWHDp8OjbyBkZSBtw7NkdWxvLS0+CiAgICAgICAgICAgICAgPERvbWluaW9EaWFsb2cKICAgICAgICAgICAgICAgIEBjbG9zZV9vcl9zYXZlPSJjbG9zZV9vcl9zYXZlX2RvbWluaW8iCiAgICAgICAgICAgICAgICBAZG9taW5pb19kYXRhPSJzZXREb21haW5WYXJpYWJsZXMiCiAgICAgICAgICAgICAgICA6ZG9tYWluPSJkb21pbmlvX2RhdGEiCiAgICAgICAgICAgICAgICA6ZGlhbG9nPSJkaWFsb2dfZG9taW5pbyIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L3YtZGlhbG9nPgoKICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBjcmlhw6fDo28gZGUgc3VibcOzZHVsby0tPgogICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX3N1Ym1vZHVsbyIgcGVyc2lzdGVudD0icGVyc2lzdGVudCIgbWF4LXdpZHRoPSI2MDBweCI+CiAgICAgICAgICAgICAgPFN1Yk1vZHVsb0RpYWxvZwogICAgICAgICAgICAgICAgOnN1Ym1vZHVsZT0ic3VibW9kdWxvIgogICAgICAgICAgICAgICAgOm1vZHVsZT0ibW9kdWxvIgogICAgICAgICAgICAgICAgQGNsb3NlX29yX3NhdmU9ImNsb3NlX29yX3NhdmVfc3VibW9kdWxvICIKICAgICAgICAgICAgICAgIDpkb21haW49ImRvbWluaW8iCiAgICAgICAgICAgICAgICA6ZGlhbG9nPSJkaWFsb2dfc3VibW9kdWxvIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgY3JpYcOnw6NvIGRlIGNvbmNlaXRvLS0+CiAgICAgICAgICAgIDx2LWRpYWxvZwogICAgICAgICAgICAgIHN0eWxlPSJvdmVyZmxvdy15OmhpZGRlbjsgb3ZlcmZsb3cteDpoaWRkZW47IgogICAgICAgICAgICAgIHYtbW9kZWw9ImRpYWxvZ19jb25jZWl0byIKICAgICAgICAgICAgICBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IgogICAgICAgICAgICAgIG1heC13aWR0aD0iNzQ1cHgiCiAgICAgICAgICAgICAgbWF4LWhlaWdodD0iNTMwcHgiCiAgICAgICAgICAgID4KICAgICAgICAgICAgICA8Q29uY2VpdG9EaWFsb2cKICAgICAgICAgICAgICAgIDpjb25jZXB0PSJjb25jZWl0byIKICAgICAgICAgICAgICAgIDptb2R1bGU9Im1vZHVsbyIKICAgICAgICAgICAgICAgIEBjbG9zZV9vcl9zYXZlPSJjbG9zZV9vcl9zYXZlX2NvbmNlaXRvIgogICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAgIDpkaWFsb2c9ImRpYWxvZ19jb25jZWl0byIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICA8IS0tRk9STVVMQVJJT1MgUEFSQSBDUklBw4fDg08gREUgQVJRVUlWT1MtLT4KICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBjcmlhw6fDo28gZGUgaW1hZ2VtLS0+CiAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfaW1hZ2VtIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjYwMHB4Ij4KICAgICAgICAgICAgICA8SW1hZ2VEaWFsb2cKICAgICAgICAgICAgICAgIEBjbG9zZT0iZGlhbG9nY2xvc2UiCiAgICAgICAgICAgICAgICA6b3B0aW9uQ2FsbD0ib2JqZWN0RmlsZSIKICAgICAgICAgICAgICAgIDp0eXBlPSJ0eXBlIgogICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGNyaWHDp8OjbyBkZSB2aWRlby0tPgogICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX3ZpZGVvIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjYwMHB4Ij4KICAgICAgICAgICAgICA8VmlkZW9EaWFsb2cKICAgICAgICAgICAgICAgIEBjbG9zZT0iZGlhbG9nY2xvc2UiCiAgICAgICAgICAgICAgICA6b3B0aW9uQ2FsbD0ib2JqZWN0RmlsZSIKICAgICAgICAgICAgICAgIDp0eXBlPSJ0eXBlIgogICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGNyaWHDp8OjbyBkZSBhdWRpby0tPgogICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX2F1ZGlvIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjYwMHB4Ij4KICAgICAgICAgICAgICA8QXVkaW9EaWFsb2cKICAgICAgICAgICAgICAgIEBjbG9zZT0iZGlhbG9nY2xvc2UiCiAgICAgICAgICAgICAgICA6b3B0aW9uQ2FsbD0ib2JqZWN0RmlsZSIKICAgICAgICAgICAgICAgIDp0eXBlPSJ0eXBlIgogICAgICAgICAgICAgICAgOmRvbWFpbj0iZG9taW5pbyIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L3YtZGlhbG9nPgogICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGNyaWHDp8OjbyBkZSB0ZXh0by0tPgogICAgICAgICAgICA8di1kaWFsb2cgdi1tb2RlbD0iZGlhbG9nX3RleHRvIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjYwMHB4Ij4KICAgICAgICAgICAgICA8VGV4dERpYWxvZwogICAgICAgICAgICAgICAgQGNsb3NlPSJkaWFsb2djbG9zZSIKICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJvYmplY3RGaWxlIgogICAgICAgICAgICAgICAgOnR5cGU9InR5cGUiCiAgICAgICAgICAgICAgICA6ZG9tYWluPSJkb21pbmlvIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvdi1kaWFsb2c+CiAgICAgICAgICAgIDwhLS1Gb3JtdWxhcmlvIHBhcmEgY3JpYcOnw6NvIGRlIGxpbmstLT4KICAgICAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9ImRpYWxvZ19saW5rIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjYwMHB4Ij4KICAgICAgICAgICAgICA8TGlua0RpYWxvZwogICAgICAgICAgICAgICAgQGNsb3NlPSJkaWFsb2djbG9zZSIKICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJvYmplY3RGaWxlIgogICAgICAgICAgICAgICAgOnR5cGU9InR5cGUiCiAgICAgICAgICAgICAgICA6ZG9tYWluPSJkb21pbmlvIgogICAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDwvdi1kaWFsb2c+CgogICAgICAgICAgICA8IS0tRk9STVVMQVJJT1MgUEFSQSBDUklBw4fDg08gREUgSVRFTlMgREUgSU5GT1JNQcOHw4NPIC0tPgogICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGNyaWHDp8OjbyBkZSBwcm9jZWRpbWVudG8gLS0+CiAgICAgICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPSJkaWFsb2dfcHJvY2VkdXJlIiBwZXJzaXN0ZW50PSJwZXJzaXN0ZW50IiBtYXgtd2lkdGg9IjYwMHB4Ij4KICAgICAgICAgICAgICA8UHJvY2VkdXJlRGlhbG9nIEBjbG9zZT0iZGlhbG9nY2xvc2UiIDpjb25jZXB0PSJjb25jZWl0byIgLz4KICAgICAgICAgICAgPC92LWRpYWxvZz4KICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgPC92LXJvdz4KICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXI+CiAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgIHt7IGRvbWluaW9fZGF0YS5zdWJ0aXRsZSB9fQogICAgICAgIDwhLS1QYW5lbHMgZG9zIE3Ds2R1bG9zLS0+CiAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVscwogICAgICAgICAgdi1mb3I9Iihtb2R1bG8pIGluIGRvbWluaW9fZGF0YS5tb2R1bGVzIgogICAgICAgICAgOmtleT0ibW9kdWxvLmlkbW9kdWxlIgogICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICA+CiAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwgdi1pZj0ibW9kdWxvLmZrX2lkbW9kdWxlID09PSBudWxsIj4KICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciBjb2xvcj0icHJpbWFyeSIgc3R5bGU9ImNvbG9yOndoaXRlOyI+CiAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjkiPgogICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICBbTW9kdWxvXQogICAgICAgICAgICAgICAgICAgIHt7IG1vZHVsby5uYW1lbW9kdWxlIH19CiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8di1jb2wgY29scz0iMyI+CiAgICAgICAgICAgICAgICAgIDwhLS0gTWVudSBwYXJhIGNyaWHDp8OjbyBkZSBhcnF1aXZvcy0tPgogICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgdG9wPSJ0b3AiCiAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwMHB4IgogICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICA6b2Zmc2V0LXk9InRydWUiCiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgZGFyaz0iZGFyayIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kb3RzLWhvcml6b250YWw8L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KCiAgICAgICAgICAgICAgICAgICAgPE1lbnVGaWxlcwogICAgICAgICAgICAgICAgICAgICAgQGRpYWxvZ29wdGlvbj0ib3BlbkZpbGVEaWFsb2ciCiAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9uQ2FsbD0ibW9kdWxvIgogICAgICAgICAgICAgICAgICAgICAgOnR5cGU9Iidtb2R1bG8nIgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGFkacOnw6NvIGRlIHN1Ym3Ds2R1bG8gb3UgY29uY2VpdG8tLT4KICAgICAgICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgICAgICAgIHRvcD0idG9wIgogICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICBvcmlnaW49ImNlbnRlciBjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgOm9mZnNldC15PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGx1czwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICA8di1saXN0PgogICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtIEBjbGljaz0ic2V0bW9kdWxvKG1vZHVsbyk7ZGlhbG9nX2NvbmNlaXRvPXRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGU+Q29uY2VpdG88L3YtbGlzdC1pdGVtLXRpdGxlPgogICAgICAgICAgICAgICAgICAgICAgPC92LWxpc3QtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbSBAY2xpY2s9InNldG1vZHVsbyhtb2R1bG8pO2RpYWxvZ19zdWJtb2R1bG89dHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3QtaXRlbS10aXRsZT5TdWJtw7NkdWxvPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvIG1vZHVsby0tPgogICAgICAgICAgICAgICAgICA8di1idG4gaWNvbj0iaWNvbiIgY29sb3I9IndoaXRlIiBAY2xpY2s9InNldG1vZHVsbyhtb2R1bG8pO2RpYWxvZ19tb2R1bG89dHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktdmlldy1oZWFkbGluZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIG3Ds2R1bG8tLT4KICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgQGNsaWNrPSJkZWxldGVlbGVtZW50byhtb2R1bG8pIj4KICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1jbG9zZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KCiAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgIHt7IG1vZHVsby5zdWJ0aXRsZSB9fQogICAgICAgICAgICAgIDwhLS1QYW5lbHMgZG9zIFN1Yk3Ds2R1bG9zLS0+CiAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVscwogICAgICAgICAgICAgICAgdi1mb3I9IihzdWJtb2R1bG8pIGluIG1vZHVsby5zdWJtb2R1bGVzIgogICAgICAgICAgICAgICAgOmtleT0ic3VibW9kdWxvLmlkbW9kdWxlIgogICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgY29sb3I9InBpbmsiIHN0eWxlPSJjb2xvcjp3aGl0ZTsiPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgW1N1Ym1vZHVsb10KICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzdWJtb2R1bG8ubmFtZW1vZHVsZSB9fQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIE1lbnUgcGFyYSBjcmlhw6fDo28gZGUgYXJxdWl2b3MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtbWVudQogICAgICAgICAgICAgICAgICAgICAgICAgIHRvcD0idG9wIgogICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIzMDBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW49ImNlbnRlciBjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgOm9mZnNldC15PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249InNjYWxlLXRyYW5zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGl2YXRvcj0ieyBvbiB9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIGRhcms9ImRhcmsiIHYtb249Im9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZG90cy1ob3Jpem9udGFsPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51RmlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBkaWFsb2dvcHRpb249Im9wZW5GaWxlRGlhbG9nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbkNhbGw9InN1Ym1vZHVsbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0eXBlPSInbW9kdWxvJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBhZGnDp8OjbyBkZSBjb25jZWl0by0tPgogICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNldG1vZHVsbyhzdWJtb2R1bG8pO2RpYWxvZ19jb25jZWl0bz10cnVlIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktcGx1czwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBzdWJtb2R1bG8tLT4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzZXRzdWJtb2R1bG8oc3VibW9kdWxvKTtkaWFsb2dfc3VibW9kdWxvPXRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS12aWV3LWhlYWRsaW5lPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgc3VibcOzZHVsby0tPgogICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gaWNvbj0iaWNvbiIgY29sb3I9IndoaXRlIiBAY2xpY2s9ImRlbGV0ZWVsZW1lbnRvKHN1Ym1vZHVsbykiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgoKICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAge3sgc3VibW9kdWxvLnN1YnRpdGxlIH19CiAgICAgICAgICAgICAgICAgICAgPCEtLVBhbmVscyBkb3MgY29uY2VpdG9zIGFkaWNpb25hZG9zIGRlbnRybyBkZSBzdWJtw7NkdWxvcy0tPgogICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbHMKICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSIoY29uY2VpdG8pIGluIHN1Ym1vZHVsby5jb25jZXB0cyIKICAgICAgICAgICAgICAgICAgICAgIDprZXk9ImNvbmNlaXRvLmlkY29uY2VpdG8iCiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi0yIgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciBjb2xvcj0iIzAwQzg1MyIgc3R5bGU9ImNvbG9yOndoaXRlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbQ29uY2VpdG9dCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgY29uY2VpdG8ubmFtZWNvbmNlcHQgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBNZW51IHBhcmEgY3JpYcOnw6NvIGRlIGFycXVpdm9zIGRvcyBjb25jZWl0b3MgYWRpY2lvbmFkb3MgZGVudHJvIGRlIHN1Ym3Ds2R1bG9zLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMzAwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luPSJjZW50ZXIgY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gaWNvbj0iaWNvbiIgY29sb3I9IndoaXRlIiBkYXJrPSJkYXJrIiB2LW9uPSJvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRvdHMtaG9yaXpvbnRhbDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWVudUZpbGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZGlhbG9nb3B0aW9uPSJvcGVuRmlsZURpYWxvZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJjb25jZWl0byIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0eXBlPSInY29uY2VpdG8nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGFkacOnw6NvIGRlIGl0ZW5zIGRlIGluZm9ybWHDp8OjbyBkb3MgY29uY2VpdG9zIGFkaWNpb25hZG9zIGRlbnRybyBkZSBzdWJtw7NkdWxvcy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wPSJ0b3AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwMHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b2Zmc2V0LXk9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgZGFyaz0iZGFyayIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wbHVzPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJzZXRjb25jZWl0byhjb25jZWl0byk7ZGlhbG9nX3Byb2NlZHVyZT10cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0tdGl0bGU+UHJvY2VkaW1lbnRvPC92LWxpc3QtaXRlbS10aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWxpc3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvcyBjb25jZWl0b3MgYWRpY2lvbmFkb3MgZGVudHJvIGRlIHN1Ym3Ds2R1bG9zLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249Imljb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz0ic2V0Y29uY2VpdG8oY29uY2VpdG8sIHN1Ym1vZHVsbyk7ZGlhbG9nX2NvbmNlaXRvPXRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS12aWV3LWhlYWRsaW5lPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgY29uY2VpdG8tLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgQGNsaWNrPSJkZWxldGVlbGVtZW50byhjb25jZWl0bykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UmVsYWNpb25hbWVudG9zOjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIExpc3RhZ2VtIGRvcyByZWxhY2lvbmFtZW50b3MgZG9zIGNvbmNlaXRvcyBhZGljaW9uYWRvcyBkZW50cm8gZGUgc3VibcOzZHVsb3MgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtdC0yIj5SZWxhY2lvbmFtZW50b3M6PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1zaW1wbGUtdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmRlZmF1bHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCI+Q29uY2VpdG8gQWx2bzwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCI+Tm9tZSBkYSBSZWxhw6fDo288L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0ZXh0LWxlZnQiPlRpcG8gZGEgUmVsYcOnw6NvPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0icmVsYWNhbyBpbiBjb25jZWl0by5zb3VyY2Vjb25jZXB0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmtleT0icmVsYWNhby5pZHJlZmVyZW5jZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3tmaW5kTmFtZVRhcmdldChtb2R1bG8uY29uY2VwdHMsIHJlbGFjYW8pfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7cmVsYWNhby5uYW1lcmVmZXJlbmNlfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7ZmluZFRpcG9SZWxhdGlvbihyZWxhY2FvLmZrX3JlZmVyZW5jZXR5cGUpfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1zaW1wbGUtdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBMaXN0YWdlbSBkb3MgYXJxdWl2b3MgZG9zIGNvbmNlaXRvcyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKG1vYmlsZW1lZGlhKSBpbiBjb25jZWl0by5tb2JpbGVtZWRpYXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJtb2JpbGVtZWRpYS5pZG1vYmlsZW1lZGlhIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgY29sb3I9Im9yYW5nZSIgc3R5bGU9ImNvbG9yOndoaXRlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXJnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57e2ZpbGVUeXBlc0ljb25bKG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlKS5zcGxpdCgiLyIpWzRdLTFdfX08L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eygobW9iaWxlbWVkaWEuZmtfaWRtZWRpYXR5cGUpLnNwbGl0KCIvIilbNF0tMSkgPiAyID8gKCgobW9iaWxlbWVkaWEuZmtfaWRtZWRpYXR5cGUpLnNwbGl0KCIvIilbNF0tMSkgPiAzID8gbW9iaWxlbWVkaWEudXJsbGluayA6IG1vYmlsZW1lZGlhLnRleHRzaG9ydCkgOiBtb2JpbGVtZWRpYS5uYW1lZmlsZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvIGFycXVpdm8vbW9iaWxlbWVkaWEgZG9zIGNvbmNlaXRvcyBhZGljaW9uYWRvcyBkZW50cm8gZGUgc3VibcOzZHVsb3MtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZXllPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgYXJxdWl2by9tb2JpbGVtZWRpYSBkb3MgY29uY2VpdG9zIGFkaWNpb25hZG9zIGRlbnRybyBkZSBzdWJtw7NkdWxvcy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImRlbGV0ZWVsZW1lbnRvKG1vYmlsZW1lZGlhKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+PC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KICAgICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBMaXN0YWdlbSBkb3MgYXJxdWl2b3MgZG9zIHN1Ym1vZHVsb3MtLT4KICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKG1vYmlsZW1lZGlhKSBpbiBzdWJtb2R1bG8ubW9iaWxlbWVkaWFzIgogICAgICAgICAgICAgICAgICAgICAgOmtleT0ibW9iaWxlbWVkaWEuaWRtb2JpbGVtZWRpYSIKICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIG1iLTIiCiAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtaGVhZGVyIGNvbG9yPSJvcmFuZ2UiIHN0eWxlPSJjb2xvcjp3aGl0ZTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFyZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+e3tmaWxlVHlwZXNJY29uWyhtb2JpbGVtZWRpYS5ma19pZG1lZGlhdHlwZSkuc3BsaXQoIi8iKVs0XS0xXX19PC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3soKG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlKS5zcGxpdCgiLyIpWzRdLTEpID4gMiA/ICgoKG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlKS5zcGxpdCgiLyIpWzRdLTEpID4gMyA/IG1vYmlsZW1lZGlhLnVybGxpbmsgOiBtb2JpbGVtZWRpYS50ZXh0c2hvcnQpIDogbW9iaWxlbWVkaWEubmFtZWZpbGUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBhcnF1aXZvL21vYmlsZW1lZGlhLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWV5ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIGFycXVpdm8vbW9iaWxlbWVkaWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj0iaWNvbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPSJkZWxldGVlbGVtZW50byhtb2JpbGVtZWRpYSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1jbG9zZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50Pjwvdi1leHBhbnNpb24tcGFuZWwtY29udGVudD4KICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbHM+CiAgICAgICAgICAgICAgICAgICAgPCEtLVBhbmVscyBkb3MgU3ViTcOzZHVsb3MtLT4KICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KCiAgICAgICAgICAgICAgPCEtLSBQYW5lbHMgZG9zIENvbmNlaXRvcy0tPgogICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbHMKICAgICAgICAgICAgICAgIHYtZm9yPSIoY29uY2VpdG8pIGluIG1vZHVsby5jb25jZXB0cyIKICAgICAgICAgICAgICAgIDprZXk9ImNvbmNlaXRvLmlkY29uY2VpdG8iCiAgICAgICAgICAgICAgICBjbGFzcz0ibXQtMiBtYi0yIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWhlYWRlciBjb2xvcj0iIzAwQzg1MyIgc3R5bGU9ImNvbG9yOndoaXRlOyI+CiAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjkiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICBbQ29uY2VpdG9dCiAgICAgICAgICAgICAgICAgICAgICAgICAge3sgY29uY2VpdG8ubmFtZWNvbmNlcHQgfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBNZW51IHBhcmEgY3JpYcOnw6NvIGRlIGFycXVpdm9zLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LW1lbnUKICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A9InRvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0iMzAwcHgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luPSJjZW50ZXIgY2VudGVyIgogICAgICAgICAgICAgICAgICAgICAgICAgIDpvZmZzZXQteT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPSJzY2FsZS10cmFuc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDphY3RpdmF0b3I9Insgb24gfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gaWNvbj0iaWNvbiIgY29sb3I9IndoaXRlIiBkYXJrPSJkYXJrIiB2LW9uPSJvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRvdHMtaG9yaXpvbnRhbDwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICA8TWVudUZpbGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZGlhbG9nb3B0aW9uPSJvcGVuRmlsZURpYWxvZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25DYWxsPSJjb25jZWl0byIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0eXBlPSInY29uY2VpdG8nIgogICAgICAgICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1tZW51PgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGFkacOnw6NvIGRlIGl0ZW5zIGRlIGluZm9ybWHDp8Ojby0tPgogICAgICAgICAgICAgICAgICAgICAgICA8di1tZW51CiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wPSJ0b3AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjMwMHB4IgogICAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbj0iY2VudGVyIGNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgICA6b2Zmc2V0LXk9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbj0ic2NhbGUtdHJhbnNpdGlvbiIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YWN0aXZhdG9yPSJ7IG9uIH0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgZGFyaz0iZGFyayIgdi1vbj0ib24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1wbHVzPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWxpc3Q+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1saXN0LWl0ZW0gQGNsaWNrPSJzZXRjb25jZWl0byhjb25jZWl0byk7ZGlhbG9nX3Byb2NlZHVyZT10cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtbGlzdC1pdGVtLXRpdGxlPlByb2NlZGltZW50bzwvdi1saXN0LWl0ZW0tdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtbGlzdC1pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1saXN0PgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtbWVudT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBjb25jZWl0by0tPgogICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9InNldGNvbmNlaXRvKGNvbmNlaXRvLCBtb2R1bG8pO2RpYWxvZ19jb25jZWl0bz10cnVlIgogICAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktdmlldy1oZWFkbGluZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIGNvbmNlaXRvLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiIEBjbGljaz0iZGVsZXRlZWxlbWVudG8oY29uY2VpdG8pIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1jbG9zZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVsLWhlYWRlcj4KCiAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgIDwhLS0gTGlzdGFnZW0gZG9zIHJlbGFjaW9uYW1lbnRvcyBkbyBjb25jZWl0byAtLT4KICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im10LTIiPlJlbGFjaW9uYW1lbnRvczo8L2gzPgogICAgICAgICAgICAgICAgICAgIDx2LXNpbXBsZS10YWJsZT4KICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZGVmYXVsdD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGV4dC1sZWZ0Ij5Db25jZWl0byBBbHZvPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGV4dC1sZWZ0Ij5Ob21lIGRhIFJlbGHDp8OjbzwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRleHQtbGVmdCI+VGlwbyBkYSBSZWxhw6fDo288L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtZm9yPSJyZWxhY2FvIGluIGNvbmNlaXRvLnNvdXJjZWNvbmNlcHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJyZWxhY2FvLmlkcmVmZXJlbmNlIgogICAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57e2ZpbmROYW1lVGFyZ2V0KG1vZHVsby5jb25jZXB0cywgcmVsYWNhbyl9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3tyZWxhY2FvLm5hbWVyZWZlcmVuY2V9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3tmaW5kVGlwb1JlbGF0aW9uKHJlbGFjYW8uZmtfcmVmZXJlbmNldHlwZSl9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPC92LXNpbXBsZS10YWJsZT4KCiAgICAgICAgICAgICAgICAgICAgPCEtLSBMaXN0YWdlbSBkb3MgYXJxdWl2b3MgZG9zIGNvbmNlaXRvcyAtLT4KICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKG1vYmlsZW1lZGlhKSBpbiBjb25jZWl0by5tb2JpbGVtZWRpYXMiCiAgICAgICAgICAgICAgICAgICAgICA6a2V5PSJtb2JpbGVtZWRpYS5pZG1vYmlsZW1lZGlhIgogICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im10LTIgbWItMiIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbC1oZWFkZXIgY29sb3I9Im9yYW5nZSIgc3R5bGU9ImNvbG9yOndoaXRlOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtcm93PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj0id2hpdGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXJnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID57e2ZpbGVUeXBlc0ljb25bKG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlKS5zcGxpdCgiLyIpWzRdLTFdfX08L3YtaWNvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eygobW9iaWxlbWVkaWEuZmtfaWRtZWRpYXR5cGUpLnNwbGl0KCIvIilbNF0tMSkgPiAyID8gKCgobW9iaWxlbWVkaWEuZmtfaWRtZWRpYXR5cGUpLnNwbGl0KCIvIilbNF0tMSkgPiAzID8gbW9iaWxlbWVkaWEudXJsbGluayA6IG1vYmlsZW1lZGlhLnRleHRzaG9ydCkgOiBtb2JpbGVtZWRpYS5uYW1lZmlsZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29sIGNvbHM9IjMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRm9ybXVsYXJpbyBwYXJhIGVkacOnw6NvIGRvIGFycXVpdm8vbW9iaWxlbWVkaWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZXllPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GdW7Dp8OjbyBwYXJhIGV4Y2x1aXIgYXJxdWl2by9tb2JpbGVtZWRpYS0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPSJpY29uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPSJ3aGl0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9ImRlbGV0ZWVsZW1lbnRvKG1vYmlsZW1lZGlhKSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgoKICAgICAgICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+PC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KICAgICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KCiAgICAgICAgICAgICAgPCEtLSBMaXN0YWdlbSBkb3MgbW9iaWxlbWVkaWFzIGRvcyBtw7NkdWxvcy0tPgoKICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWxzCiAgICAgICAgICAgICAgICB2LWZvcj0iKG1vYmlsZW1lZGlhKSBpbiBtb2R1bG8ubW9iaWxlbWVkaWFzIgogICAgICAgICAgICAgICAgOmtleT0ibW9iaWxlbWVkaWEuaWRtb2JpbGVtZWRpYSIKICAgICAgICAgICAgICAgIGNsYXNzPSJtdC0yIG1iLTIiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsPgogICAgICAgICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtaGVhZGVyIGNvbG9yPSJvcmFuZ2UiIHN0eWxlPSJjb2xvcjp3aGl0ZTsiPgogICAgICAgICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFyZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICA+e3tmaWxlVHlwZXNJY29uWyhtb2JpbGVtZWRpYS5ma19pZG1lZGlhdHlwZSkuc3BsaXQoIi8iKVs0XS0xXX19PC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAge3soKG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlKS5zcGxpdCgiLyIpWzRdLTEpID4gMiA/ICgoKG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlKS5zcGxpdCgiLyIpWzRdLTEpID4gMyA/IG1vYmlsZW1lZGlhLnVybGxpbmsgOiBtb2JpbGVtZWRpYS50ZXh0c2hvcnQpIDogbW9iaWxlbWVkaWEubmFtZWZpbGUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBhcnF1aXZvL21vYmlsZW1lZGlhLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWV5ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIGFycXVpdm8vbW9iaWxlbWVkaWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgQGNsaWNrPSJkZWxldGVlbGVtZW50byhtb2JpbGVtZWRpYSkiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgoKICAgICAgICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+PC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KICAgICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KICAgICAgICA8IS0tIExpc3RhZ2VtIGRvcyBhcnF1aXZvcyBkbyBkb21pbmlvIC0tPgogICAgICAgIDx2LWV4cGFuc2lvbi1wYW5lbHMKICAgICAgICAgIHYtZm9yPSIobW9iaWxlbWVkaWEpIGluIGRvbWluaW8ubW9iaWxlbWVkaWFzIgogICAgICAgICAgOmtleT0ibW9iaWxlbWVkaWEuaWRtb2JpbGVtZWRpYSIKICAgICAgICAgIGNsYXNzPSJtdC0yIG1iLTIiCiAgICAgICAgPgogICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsPgogICAgICAgICAgICA8di1leHBhbnNpb24tcGFuZWwtaGVhZGVyIGNvbG9yPSJvcmFuZ2UiIHN0eWxlPSJjb2xvcjp3aGl0ZTsiPgogICAgICAgICAgICAgIDx2LXJvdz4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSI5Ij4KICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPHYtaWNvbgogICAgICAgICAgICAgICAgICAgICAgY29sb3I9IndoaXRlIgogICAgICAgICAgICAgICAgICAgICAgbGFyZ2UKICAgICAgICAgICAgICAgICAgICA+e3tmaWxlVHlwZXNJY29uWyhtb2JpbGVtZWRpYS5ma19pZG1lZGlhdHlwZSkuc3BsaXQoIi8iKVs0XS0xXX19PC92LWljb24+CiAgICAgICAgICAgICAgICAgICAge3soKG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlKS5zcGxpdCgiLyIpWzRdLTEpID4gMiA/ICgoKG1vYmlsZW1lZGlhLmZrX2lkbWVkaWF0eXBlKS5zcGxpdCgiLyIpWzRdLTEpID4gMyA/IG1vYmlsZW1lZGlhLnVybGxpbmsgOiBtb2JpbGVtZWRpYS50ZXh0c2hvcnQpIDogbW9iaWxlbWVkaWEubmFtZWZpbGUgfX0KICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDx2LWNvbCBjb2xzPSIzIj4KICAgICAgICAgICAgICAgICAgPCEtLUZvcm11bGFyaW8gcGFyYSBlZGnDp8OjbyBkbyBhcnF1aXZvL21vYmlsZW1lZGlhLS0+CiAgICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uPSJpY29uIiBjb2xvcj0id2hpdGUiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWV5ZTwvdi1pY29uPgogICAgICAgICAgICAgICAgICA8L3YtYnRuPgogICAgICAgICAgICAgICAgICA8IS0tRnVuw6fDo28gcGFyYSBleGNsdWlyIGFycXVpdm8vbW9iaWxlbWVkaWEtLT4KICAgICAgICAgICAgICAgICAgPHYtYnRuIGljb249Imljb24iIGNvbG9yPSJ3aGl0ZSIgQGNsaWNrPSJkZWxldGVlbGVtZW50byhtb2JpbGVtZWRpYSkiPgogICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWNsb3NlPC92LWljb24+CiAgICAgICAgICAgICAgICAgIDwvdi1idG4+CiAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgIDwvdi1leHBhbnNpb24tcGFuZWwtaGVhZGVyPgoKICAgICAgICAgICAgPHYtZXhwYW5zaW9uLXBhbmVsLWNvbnRlbnQ+PC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICAgICAgICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KICAgICAgPC92LWV4cGFuc2lvbi1wYW5lbC1jb250ZW50PgogICAgPC92LWV4cGFuc2lvbi1wYW5lbD4KICA8L3YtZXhwYW5zaW9uLXBhbmVscz4KPC92LXJvdz4K"},null]}